<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aurumting&#39;s Blog</title>
  
  
  <link href="https://aurumting.cn/atom.xml" rel="self"/>
  
  <link href="https://aurumting.cn/"/>
  <updated>2021-12-15T13:08:18.142Z</updated>
  <id>https://aurumting.cn/</id>
  
  <author>
    <name>Aurumting</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PyTorch 源码阅读：intrusive_ptr</title>
    <link href="https://aurumting.cn/2021/12/07/PyTorch_intrusive_ptr/"/>
    <id>https://aurumting.cn/2021/12/07/PyTorch_intrusive_ptr/</id>
    <published>2021-12-07T14:00:42.114Z</published>
    <updated>2021-12-15T13:08:18.142Z</updated>
    
    <content type="html"><![CDATA[<p>PyTorch 中的侵入式指针。</p><span id="more"></span>        <h1 id="in_place"   >          <a href="#in_place" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#in_place"></a> in_place</h1>      <p>先看一下 <code>in_place.h</code>，里面是一些简单的定义：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_place_t</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">in_place_t</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;std::<span class="keyword">size_t</span> I&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_place_index_t</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">in_place_index_t</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_place_type_t</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">in_place_type_t</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">in_place_t</span> in_place&#123;&#125;;</span><br></pre></td></tr></table></div></figure><p>其中定义了一些类和模板类，另外还有一个 <code>in_place_t</code> 类型的变量 <code>in_place</code>，默认初始化。</p>        <h1 id="exclusivelyowned"   >          <a href="#exclusivelyowned" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#exclusivelyowned"></a> ExclusivelyOwned</h1>      <p><code>ExclusivelyOwned</code> 是一个类似于智能指针的包装，围绕着某个类型 <code>T</code> 的排他性拥有的实例，该类型通常具有强制性引用计数（目前是 <code>Tensor</code> 或  <code>c10::intrusive_ptr</code>）。如果你有一段孤立的代码，知道它对这些类型中的一个对象拥有唯一的所有权（即，因为你直接创建了它或者使用了工厂函数），并且该对象不会从这段孤立的代码中逃脱，那么将该对象移入 <code>ExclusivelyOwned</code> 将避免在销毁时进行原子引用计数递减。</p><p>如果你首先直接创建 <code>Tensor/intrusive_ptr</code>，你可以使用 <code>ExclusivelyOwned</code> 的 <code>in_place</code> 构造函数来避免做任何存储来初始化引用计数和弱引用计数（然而，请注意，在这种情况下，如果适用，你可能应该使用 <code>std::unique_ptr</code> 而不是 <code>intrusive_ptr</code>）。</p><p><code>ExclusivelyOwned</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExclusivelyOwned</span> &#123;</span></span><br><span class="line">    <span class="keyword">using</span> EOT = ExclusivelyOwnedTraits&lt;T&gt;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> dummy_;</span><br><span class="line">        <span class="keyword">typename</span> ExclusivelyOwnedTraits&lt;T&gt;::repr_type repr_;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ExclusivelyOwned</span>() : <span class="built_in">repr_</span>(EOT::<span class="built_in">nullRepr</span>()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ExclusivelyOwned</span>(<span class="keyword">const</span> ExclusivelyOwned&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    ExclusivelyOwned&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ExclusivelyOwned&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ExclusivelyOwned</span>() &#123;</span><br><span class="line">        EOT::<span class="built_in">destroyOwned</span>(repr_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">T</span><span class="params">()</span> &amp;&amp; </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">take</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">take</span><span class="params">()</span> &amp;&amp; </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EOT::<span class="built_in">take</span>(repr_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typename</span> EOT::pointer_type <span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typename</span> EOT::pointer_type <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EOT::<span class="built_in">getImpl</span>(repr_);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    std::<span class="keyword">remove_pointer_t</span>&lt;<span class="keyword">typename</span> EOT::pointer_type&gt;&amp; <span class="keyword">operator</span>*() &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>其中主要用到的 <code>ExclusivelyOwnedTraits</code> 实现如下（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExclusivelyOwnedTraits</span>&lt;</span>c10::intrusive_ptr&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">using</span> repr_type = T*;</span><br><span class="line">    <span class="keyword">using</span> pointer_type = T*;</span><br><span class="line">    <span class="keyword">using</span> const_pointer_type = T*;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> repr_type <span class="title">createInPlace</span><span class="params">(Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">T</span>(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> repr_type <span class="title">moveToRepr</span><span class="params">(c10::intrusive_ptr&lt;T&gt;&amp;&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destroyOwned</span><span class="params">(repr_type x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const_cast</span>&lt;std::<span class="keyword">remove_const_t</span>&lt;T&gt;*&gt;(x)-&gt;<span class="built_in">release_resources</span>();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">            x-&gt;refcount_ = <span class="number">0</span>;</span><br><span class="line">            x-&gt;weakcount_ = <span class="number">0</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        x-&gt;<span class="built_in">release_resources</span>();</span><br><span class="line">        <span class="keyword">delete</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> c10::intrusive_ptr&lt;T&gt; <span class="title">take</span><span class="params">(repr_type&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">            x-&gt;refcount_ = <span class="number">0</span>;</span><br><span class="line">            x-&gt;weakcount_ = <span class="number">0</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">auto</span> result = c10::intrusive_ptr&lt;T&gt;(x);</span><br><span class="line">            x = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> pointer_type <span class="title">getImpl</span><span class="params">(repr_type x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>ExclusivelyOwnedTraits</code> 中全是静态方法，相当于一个包装类。</p>        <h1 id="maybeowned"   >          <a href="#maybeowned" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maybeowned"></a> MaybeOwned</h1>      <p><code>MaybeOwnedTraits&lt;T&gt;</code> 描述了如何从 <code>T</code> 中借入。下面是我们如何实现从一个任意类型的 <code>T</code> 中借入，使用一个原始指针到 <code>const</code> ：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaybeOwnedTraitsGenericImpl</span> &#123;</span></span><br><span class="line">    <span class="keyword">using</span> owned_type = T;</span><br><span class="line">    <span class="keyword">using</span> borrow_type = <span class="keyword">const</span> T*;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> borrow_type <span class="title">createBorrow</span><span class="params">(<span class="keyword">const</span> owned_type&amp; from)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assignBorrow</span><span class="params">(borrow_type&amp; lhs, borrow_type rhs)</span> </span>&#123;</span><br><span class="line">        lhs = rhs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destroyBorrow</span><span class="params">(borrow_type&amp; toDestroy)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> owned_type&amp; <span class="title">referenceFromBorrow</span><span class="params">(<span class="keyword">const</span> borrow_type&amp; borrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *borrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> owned_type* <span class="title">pointerFromBorrow</span><span class="params">(<span class="keyword">const</span> borrow_type&amp; borrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">debugBorrowIsValid</span><span class="params">(<span class="keyword">const</span> borrow_type&amp; borrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrow != <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>MaybeOwnedTraitsGenericImpl</code> 类没有成员变量，且其中所有方法都是静态的。主要围绕两个类型：<code>owned_type</code> 和 <code>borrow_type</code> 展开，其中 <code>owned_type</code> 就是类型 <code>T</code> ，而 <code>borrow_type</code> 是指向常量类型 <code>T</code> 的指针。</p><p>对于一些我们控制的类型，有可能消除借用的额外指示层。</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaybeOwnedTraits</span>;</span></span><br></pre></td></tr></table></div></figure><p>明确地启用 <code>MaybeOwned&lt;shared_ptr&lt;T&gt;&gt;</code> ，而不是允许 <code>MaybeOwned</code> 立即用于任何类型：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaybeOwnedTraits</span>&lt;</span>std::shared_ptr&lt;T&gt;&gt;</span><br><span class="line">    : <span class="keyword">public</span> MaybeOwnedTraitsGenericImpl&lt;std::shared_ptr&lt;T&gt;&gt; &#123;&#125;;</span><br></pre></td></tr></table></div></figure><p><code>MaybeOwnedTraits</code> 实现：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaybeOwnedTraits</span>&lt;</span>c10::intrusive_ptr&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">using</span> owned_type = c10::intrusive_ptr&lt;T&gt;;</span><br><span class="line">    <span class="keyword">using</span> borrow_type = c10::intrusive_ptr&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> borrow_type <span class="title">createBorrow</span><span class="params">(<span class="keyword">const</span> owned_type&amp; from)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrow_type::<span class="built_in">reclaim</span>(from.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assignBorrow</span><span class="params">(borrow_type&amp; lhs, <span class="keyword">const</span> borrow_type&amp; rhs)</span> </span>&#123;</span><br><span class="line">        lhs.<span class="built_in">release</span>();</span><br><span class="line">        lhs = borrow_type::<span class="built_in">reclaim</span>(rhs.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destroyBorrow</span><span class="params">(borrow_type&amp; toDestroy)</span> </span>&#123;</span><br><span class="line">        toDestroy.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> owned_type&amp; <span class="title">referenceFromBorrow</span><span class="params">(<span class="keyword">const</span> borrow_type&amp; borrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> owned_type* <span class="title">pointerFromBorrow</span><span class="params">(<span class="keyword">const</span> borrow_type&amp; borrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;borrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">debugBorrowIsValid</span><span class="params">(<span class="keyword">const</span> borrow_type&amp; borrow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>和上面的一样，相当于一层包装器。</p><p>围绕借来的或拥有的 <code>T</code> 的智能指针。当用 <code>borrowed()</code> 构造时，调用者必须确保借来的参数超过这个 <code>MaybeOwned&lt;T&gt;</code> 。与 <span class="exturl"><a class="exturl__link"   href="https://www.rust-lang.org/" >Rust</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的 <span class="exturl"><a class="exturl__link"   href="https://doc.rust-lang.org/std/borrow/enum.Cow.html" >std::borrow::Cow</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 相比，但请注意，它可能不适合一般使用，因为 <code>C++</code> 没有借入检查。包括在这里以支持 <code>Tensor::expect_contiguous</code> 。</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaybeOwned</span> <span class="keyword">final</span> &#123;</span></span><br><span class="line">    <span class="keyword">using</span> borrow_type = <span class="keyword">typename</span> MaybeOwnedTraits&lt;T&gt;::borrow_type;</span><br><span class="line">    <span class="keyword">using</span> owned_type = <span class="keyword">typename</span> MaybeOwnedTraits&lt;T&gt;::owned_type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isBorrowed_;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        borrow_type borrow_;</span><br><span class="line">        owned_type own_;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Don&#x27;t use this; use borrowed() instead.</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MaybeOwned</span><span class="params">(<span class="keyword">const</span> owned_type&amp; t)</span></span></span><br><span class="line"><span class="function">        : isBorrowed_(true), borrow_(MaybeOwnedTraits&lt;T&gt;::createBorrow(t)) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Don&#x27;t use this; use owned() instead.</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MaybeOwned</span><span class="params">(T&amp;&amp; t)</span> <span class="title">noexcept</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        std::is_nothrow_move_constructible&lt;T&gt;::value)</span></span></span><br><span class="line"><span class="function">        : isBorrowed_(false), own_(std::move(t)) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Don&#x27;t use this; use owned() instead.</span></span><br><span class="line">    <span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MaybeOwned</span><span class="params">(<span class="keyword">in_place_t</span>, Args&amp;&amp;... args)</span></span></span><br><span class="line"><span class="function">        : isBorrowed_(false), own_(std::forward&lt;Args&gt;(args)...) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MaybeOwned</span><span class="params">()</span> : isBorrowed_(true), borrow_() &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MaybeOwned</span>(<span class="keyword">const</span> MaybeOwned&amp; rhs) : <span class="built_in">isBorrowed_</span>(rhs.isBorrowed_) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">C10_LIKELY</span>(rhs.isBorrowed_)) &#123;</span><br><span class="line">            MaybeOwnedTraits&lt;T&gt;::<span class="built_in">assignBorrow</span>(borrow_, rhs.borrow_);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in"><span class="keyword">new</span></span> (&amp;own_) <span class="built_in">T</span>(rhs.own_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MaybeOwned&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MaybeOwned&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">C10_UNLIKELY</span>(!isBorrowed_)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rhs.isBorrowed_) &#123;</span><br><span class="line">                own_.~<span class="built_in">T</span>();</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">assignBorrow</span>(borrow_, rhs.borrow_);</span><br><span class="line">                isBorrowed_ = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                own_ = rhs.own_;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">C10_LIKELY</span>(rhs.isBorrowed_)) &#123;</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">assignBorrow</span>(borrow_, rhs.borrow_);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">destroyBorrow</span>(borrow_);</span><br><span class="line">                <span class="keyword">new</span> (&amp;own_) <span class="built_in">T</span>(rhs.own_);</span><br><span class="line">                isBorrowed_ = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(isBorrowed_ == rhs.isBorrowed_);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MaybeOwned</span>(MaybeOwned&amp;&amp; rhs) <span class="built_in"><span class="keyword">noexcept</span></span>(</span><br><span class="line">        std::is_nothrow_move_constructible&lt;T&gt;::value)</span><br><span class="line">        : <span class="built_in">isBorrowed_</span>(rhs.isBorrowed_) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">C10_LIKELY</span>(rhs.isBorrowed_)) &#123;</span><br><span class="line">            MaybeOwnedTraits&lt;T&gt;::<span class="built_in">assignBorrow</span>(borrow_, rhs.borrow_);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in"><span class="keyword">new</span></span> (&amp;own_) <span class="built_in">T</span>(std::<span class="built_in">move</span>(rhs.own_));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MaybeOwned&amp; <span class="keyword">operator</span>=(MaybeOwned&amp;&amp; rhs) <span class="built_in"><span class="keyword">noexcept</span></span>(</span><br><span class="line">        std::is_nothrow_move_assignable&lt;T&gt;::value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) &#123;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">C10_UNLIKELY</span>(!isBorrowed_)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rhs.isBorrowed_) &#123;</span><br><span class="line">                own_.~<span class="built_in">T</span>();</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">assignBorrow</span>(borrow_, rhs.borrow_);</span><br><span class="line">                isBorrowed_ = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                own_ = std::<span class="built_in">move</span>(rhs.own_);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">C10_LIKELY</span>(rhs.isBorrowed_)) &#123;</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">assignBorrow</span>(borrow_, rhs.borrow_);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">destroyBorrow</span>(borrow_);</span><br><span class="line">                <span class="keyword">new</span> (&amp;own_) <span class="built_in">T</span>(std::<span class="built_in">move</span>(rhs.own_));</span><br><span class="line">                isBorrowed_ = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(isBorrowed_ == rhs.isBorrowed_);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> MaybeOwned <span class="title">borrowed</span><span class="params">(<span class="keyword">const</span> T&amp; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MaybeOwned</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> MaybeOwned <span class="title">owned</span><span class="params">(T&amp;&amp; t)</span> <span class="title">noexcept</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        std::is_nothrow_move_constructible&lt;T&gt;::value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MaybeOwned</span>(std::<span class="built_in">move</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> MaybeOwned <span class="title">owned</span><span class="params">(<span class="keyword">in_place_t</span>, Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MaybeOwned</span>(in_place, std::forward&lt;Args&gt;(args)...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MaybeOwned</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">C10_UNLIKELY</span>(!isBorrowed_)) &#123;</span><br><span class="line">            own_.~<span class="built_in">T</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MaybeOwnedTraits&lt;T&gt;::<span class="built_in">destroyBorrow</span>(borrow_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">unsafeIsBorrowed</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isBorrowed_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span>&amp; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isBorrowed_) &#123;</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">debugBorrowIsValid</span>(borrow_));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C10_LIKELY</span>(isBorrowed_)</span><br><span class="line">            ? MaybeOwnedTraits&lt;T&gt;::<span class="built_in">referenceFromBorrow</span>(borrow_)</span><br><span class="line">            : own_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isBorrowed_) &#123;</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">debugBorrowIsValid</span>(borrow_));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C10_LIKELY</span>(isBorrowed_)</span><br><span class="line">            ? MaybeOwnedTraits&lt;T&gt;::<span class="built_in">pointerFromBorrow</span>(borrow_)</span><br><span class="line">            : &amp;own_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T <span class="keyword">operator</span>*() &amp;&amp; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isBorrowed_) &#123;</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(</span><br><span class="line">                MaybeOwnedTraits&lt;T&gt;::<span class="built_in">debugBorrowIsValid</span>(borrow_));</span><br><span class="line">            <span class="keyword">return</span> MaybeOwnedTraits&lt;T&gt;::<span class="built_in">referenceFromBorrow</span>(borrow_);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">move</span>(own_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>基本上就是加了一些检查，然后对前面的 <code>MaybeOwnedTraits</code> 的一层封装。</p>        <h1 id="intrusive_ptr"   >          <a href="#intrusive_ptr" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#intrusive_ptr"></a> intrusive_ptr</h1>      <p><code>intrusive_ptr&lt;T&gt;</code> 是 <code>shared_ptr&lt;T&gt;</code> 的一个替代方案，它有更好的性能，因为它在内部进行引用计数（即在对象本身的一个成员中）。你的类 <code>T</code> 需要继承自 <code>intrusive_ptr_target</code> 以允许它被用于 <code>intrusive_ptr&lt;T&gt;</code> 。你的类的构造函数不应该允许 <code>this</code> 转移到其他线程或从 <code>this</code> 创建一个 <code>intrusive_ptr</code> 。</p><p><code>std::enable_shared_from_this</code> 的一个众所周知的问题是，它允许你从一个堆栈分配的对象中创建一个 <code>std::shared_ptr</code> ，这是完全错误的，因为一旦你从堆栈中返回，这个对象就会死亡。 在 <code>intrusive_ptr</code> 中，我们可以检测到这种情况的发生，因为我们将继承自 <code>intrusive_ptr_target</code> 的对象的引用计数或弱引用计数设置为零，<em>除非</em> 我们能证明该对象是动态分配的（例如，通过 <code>make_intrusive</code>）。</p><p>因此，每当你将一个 <code>T*</code> 转化为 <code>intrusive_ptr&lt;T&gt;</code> 时，我们就会检查并确保引用计数不是零（或者，对 <code>weak_intrusive_ptr&lt;T&gt;</code> 进行更微妙的测试，对于这种情况，引用计数可能有效地是零，但弱引用计数最好不是零），因为这告诉我们这个对象是否是由我们分配的。如果不是，就不要用 <code>intrusive_ptr</code> 了。</p><p>实现方案是这样的：</p><ul><li><p>引用计数等于对象的强引用数量；弱引用计数为对象的弱引用数量，如果引用计数大于零，再加一。不变式：引用计数大于零 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> 弱引用计数大于零。</p></li><li><p><code>c10::StorageImpl</code> 只要有任何强的或弱的指针指向它，它就一直活着（弱引用计数大于零，因为强引用算作弱引用计数的 +1）。</p></li><li><p>当引用计数为零时，析构器被调用，<code>data_ptr</code> 被释放。</p></li><li><p>一旦引用计数为零，它就不能再大于零了（从大于零到等于零的过渡是单调的）。</p></li><li><p>当你通过一个弱指针访问 <code>c10::StorageImpl</code> 时，如果它大于零，你必须原子化地增加使用计数，否则，你必须报告该存储已死。</p></li></ul><p><code>intrusive_ptr_target</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C10_API</span> <span class="title">intrusive_ptr_target</span> &#123;</span></span><br><span class="line">    <span class="keyword">mutable</span> std::atomic&lt;<span class="keyword">size_t</span>&gt; refcount_;</span><br><span class="line">    <span class="keyword">mutable</span> std::atomic&lt;<span class="keyword">size_t</span>&gt; weakcount_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> NullType&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">intrusive_ptr</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keyword">void</span> raw::intrusive_ptr::<span class="built_in">incref</span>(intrusive_ptr_target* self);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> NullType&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">weak_intrusive_ptr</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keyword">void</span> raw::weak_intrusive_ptr::<span class="built_in">incref</span>(</span><br><span class="line">        intrusive_ptr_target* self);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span> <span class="title">ExclusivelyOwnedTraits</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">intrusive_ptr_target</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(</span><br><span class="line">        refcount_.<span class="built_in">load</span>() == <span class="number">0</span> || refcount_.<span class="built_in">load</span>() &gt;= INT_MAX,</span><br><span class="line">        <span class="string">&quot;Tried to destruct an intrusive_ptr_target that still has intrusive_ptr to it; refcount was &quot;</span>,</span><br><span class="line">        refcount_.<span class="built_in">load</span>());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(</span><br><span class="line">        weakcount_.<span class="built_in">load</span>() == <span class="number">1</span> || weakcount_.<span class="built_in">load</span>() == <span class="number">0</span> ||</span><br><span class="line">            weakcount_.<span class="built_in">load</span>() == INT_MAX - <span class="number">1</span> || weakcount_.<span class="built_in">load</span>() == INT_MAX,</span><br><span class="line">        <span class="string">&quot;Tried to destruct an intrusive_ptr_target that still has weak_intrusive_ptr to it&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">intrusive_ptr_target</span><span class="params">()</span> <span class="keyword">noexcept</span> : refcount_(<span class="number">0</span>), weakcount_(<span class="number">0</span>) &#123;</span>&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">intrusive_ptr_target</span>(intrusive_ptr_target&amp;&amp; other) <span class="keyword">noexcept</span></span><br><span class="line">        : <span class="built_in">intrusive_ptr_target</span>() &#123;&#125;</span><br><span class="line">    intrusive_ptr_target&amp; <span class="keyword">operator</span>=(intrusive_ptr_target&amp;&amp; other) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">release_resources</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>intrusive_ptr_target</code> 内有原子 <code>size_t</code> 类型的 <code>refcount_</code> 和 <code>weakcount_</code> 以保证线程安全性。另外有两个友元类，<code>intrusive_ptr</code> 和 <code>weak_intrusive_ptr</code> 以及相应的 <code>incref</code> 友元函数。之后还有友元类：<code>ExclusivelyOwnedTraits</code> 。</p><p>当引用计数达到零时，会调用 <code>release_resources()</code> 。你可以覆盖它来释放昂贵的资源。可能仍然有弱引用，所以你的对象可能还没有被析构，但你可以假设这个对象不再被使用了，即不再调用方法或访问成员（我们只是还不能析构它，因为我们需要弱引用计数的访问）。<br />即使没有弱引用（即你的类即将被析构），<code>release_resources()</code> 也保证会被首先调用。然而，如果你将你的类用于堆栈中被作用域析构的对象（即没有 <code>intrusive_ptr</code>），该函数将不会被调用。</p><p>下面看一下 <code>intrusive_ptr</code> 的实现（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TTarget</span>,</span></span><br><span class="line"><span class="class">    <span class="keyword">class</span> <span class="title">NullType</span> =</span> detail::intrusive_target_default_null_type&lt;TTarget&gt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">intrusive_ptr</span> <span class="keyword">final</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">static_assert</span></span>(</span><br><span class="line">        std::is_base_of&lt;</span><br><span class="line">            TTarget,</span><br><span class="line">            <span class="keyword">typename</span> std::remove_pointer&lt;<span class="keyword">decltype</span>(NullType::<span class="built_in">singleton</span>())&gt;::type&gt;::</span><br><span class="line">            value,</span><br><span class="line">        <span class="string">&quot;NullType::singleton() must return a element_type* pointer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    TTarget* target_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span> <span class="title">ExclusivelyOwnedTraits</span>;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TTarget2</span>, <span class="keyword">class</span> <span class="title">NullType2</span>&gt;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">intrusive_ptr</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">weak_intrusive_ptr</span>&lt;</span>TTarget, NullType&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retain_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target_ != NullType::<span class="built_in">singleton</span>()) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> new_refcount =</span><br><span class="line">                detail::<span class="built_in">atomic_refcount_increment</span>(target_-&gt;refcount_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset_</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target_ != NullType::<span class="built_in">singleton</span>() &amp;&amp;</span><br><span class="line">            detail::<span class="built_in">atomic_refcount_decrement</span>(target_-&gt;refcount_) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const_cast</span>&lt;std::<span class="keyword">remove_const_t</span>&lt;TTarget&gt;*&gt;(target_)-&gt;<span class="built_in">release_resources</span>();</span><br><span class="line">            <span class="keyword">if</span> (target_-&gt;weakcount_.<span class="built_in">load</span>(std::memory_order_acquire) == <span class="number">1</span> ||</span><br><span class="line">                detail::<span class="built_in">atomic_weakcount_decrement</span>(target_-&gt;weakcount_) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">delete</span> target_;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        target_ = NullType::<span class="built_in">singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">intrusive_ptr</span><span class="params">(TTarget* target)</span></span></span><br><span class="line"><span class="function">        : intrusive_ptr(target, raw::DontIncreaseRefcount&#123;</span>&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target_ != NullType::<span class="built_in">singleton</span>()) &#123;</span><br><span class="line">            target_-&gt;refcount_.<span class="built_in">store</span>(<span class="number">1</span>, std::memory_order_relaxed);</span><br><span class="line">            target_-&gt;weakcount_.<span class="built_in">store</span>(<span class="number">1</span>, std::memory_order_relaxed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> element_type = TTarget;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">intrusive_ptr</span>() <span class="keyword">noexcept</span></span><br><span class="line">        : <span class="built_in">intrusive_ptr</span>(NullType::<span class="built_in">singleton</span>(), raw::DontIncreaseRefcount&#123;&#125;) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">intrusive_ptr</span><span class="params">(TTarget* target, raw::DontIncreaseRefcount)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">        : target_(target) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">intrusive_ptr</span><span class="params">(std::unique_ptr&lt;TTarget&gt; rhs)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">        : intrusive_ptr(rhs.release()) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">intrusive_ptr</span>(intrusive_ptr&amp;&amp; rhs) <span class="keyword">noexcept</span> : <span class="built_in">target_</span>(rhs.target_) &#123;</span><br><span class="line">        rhs.target_ = NullType::<span class="built_in">singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">From</span>, <span class="keyword">class</span> <span class="title">FromNullType</span>&gt;</span></span><br><span class="line">    <span class="comment">/* implicit */</span> <span class="built_in">intrusive_ptr</span>(intrusive_ptr&lt;From, FromNullType&gt;&amp;&amp; rhs) <span class="keyword">noexcept</span></span><br><span class="line">        : <span class="built_in">target_</span>(</span><br><span class="line">                detail::assign_ptr_&lt;TTarget, NullType, FromNullType&gt;(rhs.target_)) &#123;</span><br><span class="line">        rhs.target_ = FromNullType::<span class="built_in">singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">intrusive_ptr</span>() <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="built_in">reset_</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">From</span>, <span class="keyword">class</span> <span class="title">FromNullType</span>&gt;</span></span><br><span class="line">    intrusive_ptr&amp; <span class="keyword">operator</span>=(intrusive_ptr&lt;From, FromNullType&gt;&amp;&amp; rhs) &amp; <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        intrusive_ptr tmp = std::<span class="built_in">move</span>(rhs);</span><br><span class="line">        <span class="built_in">swap</span>(tmp);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TTarget* <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TTarget&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *target_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TTarget* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target_ != NullType::<span class="built_in">singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">defined</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target_ != NullType::<span class="built_in">singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">use_count</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target_ == NullType::<span class="built_in">singleton</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target_-&gt;refcount_.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">weak_use_count</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target_ == NullType::<span class="built_in">singleton</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target_-&gt;weakcount_.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TTarget* <span class="title">release</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        TTarget* result = target_;</span><br><span class="line">        target_ = NullType::<span class="built_in">singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">static</span> intrusive_ptr <span class="title">reclaim</span><span class="params">(TTarget* owning_ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">intrusive_ptr</span>(owning_ptr, raw::DontIncreaseRefcount&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> intrusive_ptr <span class="title">reclaim_copy</span><span class="params">(TTarget* owning_ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> ret = <span class="built_in">reclaim</span>(owning_ptr);</span><br><span class="line">        ret.<span class="built_in">retain_</span>();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;class... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> intrusive_ptr <span class="title">make</span><span class="params">(Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">intrusive_ptr</span>(<span class="keyword">new</span> <span class="built_in">TTarget</span>(std::forward&lt;Args&gt;(args)...));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> intrusive_ptr <span class="title">unsafe_steal_from_new</span><span class="params">(TTarget* raw_ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">intrusive_ptr</span>(raw_ptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> intrusive_ptr <span class="title">unsafe_adapt_non_heap_allocated</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        TTarget* raw_ptr,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">size_t</span> expected_decrefs)</span> </span>&#123;</span><br><span class="line">        <span class="function">intrusive_ptr <span class="title">result</span><span class="params">(raw_ptr, raw::DontIncreaseRefcount&#123;&#125;)</span></span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> NDEBUG</span></span><br><span class="line">            expected_decrefs = <span class="number">0</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        result.target_-&gt;refcount_.<span class="built_in">store</span>(</span><br><span class="line">            INT_MAX + expected_decrefs, std::memory_order_relaxed);</span><br><span class="line">        result.target_-&gt;weakcount_.<span class="built_in">store</span>(INT_MAX, std::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> intrusive_ptr <span class="title">unsafe_reclaim_from_nonowning</span><span class="params">(TTarget* raw_ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> ptr = <span class="built_in">reclaim</span>(raw_ptr); <span class="comment">// doesn&#x27;t increase refcount</span></span><br><span class="line">        ptr.<span class="built_in">retain_</span>();</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>其中，<code>detail</code> 命名空间的部分实现：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TTarget</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intrusive_target_default_null_type</span> <span class="keyword">final</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">constexpr</span> TTarget* <span class="title">singleton</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TTarget</span>, <span class="keyword">class</span> <span class="title">ToNullType</span>, <span class="keyword">class</span> <span class="title">FromNullType</span>&gt;</span></span><br><span class="line"><span class="function">TTarget* <span class="title">assign_ptr_</span><span class="params">(TTarget* rhs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (FromNullType::<span class="built_in">singleton</span>() == rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> ToNullType::<span class="built_in">singleton</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rhs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">atomic_refcount_increment</span><span class="params">(std::atomic&lt;<span class="keyword">size_t</span>&gt;&amp; refcount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> refcount.<span class="built_in">fetch_add</span>(<span class="number">1</span>, std::memory_order_acq_rel) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>除此之外，还有一些辅助方法：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TTarget</span>,</span></span><br><span class="line"><span class="class">    <span class="keyword">class</span> <span class="title">NullType</span> =</span> detail::intrusive_target_default_null_type&lt;TTarget&gt;,</span><br><span class="line">    class... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> intrusive_ptr&lt;TTarget, NullType&gt; <span class="title">make_intrusive</span><span class="params">(Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> intrusive_ptr&lt;TTarget, NullType&gt;::<span class="built_in">make</span>(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TTarget</span>, <span class="keyword">class</span> <span class="title">NullType</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    intrusive_ptr&lt;TTarget, NullType&gt;&amp; lhs,</span></span></span><br><span class="line"><span class="params"><span class="function">    intrusive_ptr&lt;TTarget, NullType&gt;&amp; rhs)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    lhs.<span class="built_in">swap</span>(rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">TTarget1</span>, <span class="keyword">class</span> <span class="title">NullType1</span>, <span class="keyword">class</span> <span class="title">TTarget2</span>, <span class="keyword">class</span> <span class="title">NullType2</span>&gt;</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(</span><br><span class="line">    <span class="keyword">const</span> intrusive_ptr&lt;TTarget1, NullType1&gt;&amp; lhs,</span><br><span class="line">    <span class="keyword">const</span> intrusive_ptr&lt;TTarget2, NullType2&gt;&amp; rhs) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.<span class="built_in">get</span>() &lt; rhs.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* other operators... */</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;PyTorch 中的侵入式指针。&lt;/p&gt;</summary>
    
    
    
    <category term="Deep Learning" scheme="https://aurumting.cn/categories/Deep-Learning/"/>
    
    
    <category term="PyTorch" scheme="https://aurumting.cn/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch 源码阅读：c10</title>
    <link href="https://aurumting.cn/2021/12/04/PyTorch_c10/"/>
    <id>https://aurumting.cn/2021/12/04/PyTorch_c10/</id>
    <published>2021-12-04T13:54:42.039Z</published>
    <updated>2021-12-15T11:39:02.406Z</updated>
    
    <content type="html"><![CDATA[<p>PyTorch 中的张量（Tensor）实现。</p><span id="more"></span>        <h1 id="uniquevoidptr"   >          <a href="#uniquevoidptr" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#uniquevoidptr"></a> UniqueVoidPtr</h1>      <p><code>detail::UniqueVoidPtr</code> 是一个像 <code>unique_ptr</code> 一样的独有智能指针，但有三个主要区别：</p><ol><li>它是专门针对 <code>void</code> 的</li><li>它专门用于函数指针删除器 <code>void(void* ctx)</code> ；也就是说，删除器不接受对数据的引用，只接受一个上下文指针（作为 <code>void*</code> 被删除）。事实上，在内部，这个指针被实现为有一个对上下文的独有引用，和一个对数据的非独有引用；这就是为什么你要 <code>release_context()</code> ，而不是 <code>release()</code>（传统的 <code>release()</code> 的 API 不会给你足够的信息来正确处置这个对象）</li><li>当 <code>unique</code> 指针被析构并且上下文非空时，保证删除器被调用；这与 <code>std::unique_ptr</code> 不同，在后者中，如果数据指针为空，删除器不被调用</li></ol><p>一些方法的类型与 <code>std::unique_ptr</code> 略有不同，以反映这一点。</p><p><code>UniqueVoidPtr</code> 类：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniqueVoidPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">void</span>* data_;</span><br><span class="line">    std::unique_ptr&lt;<span class="keyword">void</span>, DeleterFnPtr&gt; ctx_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UniqueVoidPtr</span>() : <span class="built_in">data_</span>(<span class="literal">nullptr</span>), <span class="built_in">ctx_</span>(<span class="literal">nullptr</span>, &amp;deleteNothing) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">UniqueVoidPtr</span><span class="params">(<span class="keyword">void</span>* data)</span></span></span><br><span class="line"><span class="function">        : data_(data), ctx_(nullptr, &amp;deleteNothing) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UniqueVoidPtr</span>(<span class="keyword">void</span>* data, <span class="keyword">void</span>* ctx, DeleterFnPtr ctx_deleter)</span><br><span class="line">        : <span class="built_in">data_</span>(data), <span class="built_in">ctx_</span>(ctx, ctx_deleter ? ctx_deleter : &amp;deleteNothing) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ctx_ = <span class="literal">nullptr</span>;</span><br><span class="line">        data_ = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="title">get_context</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctx_.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="title">release_context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctx_.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::unique_ptr&lt;<span class="keyword">void</span>, DeleterFnPtr&gt;&amp;&amp; <span class="title">move_context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">move</span>(ctx_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">C10_NODISCARD <span class="keyword">bool</span> <span class="title">compare_exchange_deleter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        DeleterFnPtr expected_deleter,</span></span></span><br><span class="line"><span class="params"><span class="function">        DeleterFnPtr new_deleter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get_deleter</span>() != expected_deleter)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ctx_ = std::unique_ptr&lt;<span class="keyword">void</span>, DeleterFnPtr&gt;(ctx_.<span class="built_in">release</span>(), new_deleter);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function">T* <span class="title">cast_context</span><span class="params">(DeleterFnPtr expected_deleter)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get_deleter</span>() != expected_deleter)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T*&gt;(<span class="built_in">get_context</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data_ || ctx_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">DeleterFnPtr <span class="title">get_deleter</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctx_.<span class="built_in">get_deleter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>其中：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> DeleterFnPtr = <span class="built_in"><span class="keyword">void</span></span> (*)(<span class="keyword">void</span>*)</span><br></pre></td></tr></table></div></figure><p>也就是说：<code>DeleterFnPtr</code> 是一个函数指针，接受一个无类型指针，无返回类型。</p><p>以及 <code>deleteNoting</code> 声明：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TORCH_API <span class="keyword">void</span> <span class="title">deleteNothing</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br></pre></td></tr></table></div></figure><p>及其实现：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNothing</span><span class="params">(<span class="keyword">void</span>*)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></div></figure><p>顾名思义，<code>deleteNothing</code> 什么都不做。</p><p><code>UniqueVoidPtr</code> 中有两个私有成员变量：无类型指针 <code>data_</code> 以及带有删除器 <code>DeleterFnPtr</code> 的指向 <code>void</code> 的独有指针 <code>ctx_</code> 。只要区分了数据和上下文，其他的方法都可以从名字中理解其含义。</p><p><code>UniqueVoidPtr</code> 解决了张量数据分配器的一个常见问题，即你感兴趣的数据指针（例如 <code>float*</code>）与你需要实际释放数据的上下文指针（例如 <code>DLManagedTensor</code>）不一致。在传统的删除器设计中，你必须在删除器本身存储额外的上下文，这样你才能真正删除正确的东西。用标准的 C++ 实现这一点有点容易出错：如果你使用 <code>std::unique_ptr</code> 来管理张量，如果数据指针是 <code>nullptr</code> ，删除器将不会被调用，如果上下文指针是非空的，这可能会导致泄漏（而删除器负责释放数据指针和上下文指针）。</p><p>因此，在我们对 <code>unique_ptr</code> 的重新实现中，只是将上下文直接存储在 <code>unique</code> 指针中，并将删除器附加到上下文指针本身。在简单的情况下，上下文指针只是指针本身。</p>        <h1 id="allocator"   >          <a href="#allocator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#allocator"></a> Allocator</h1>      <p>一个 <code>DataPtr</code> 是一个的指向一些内存的 <code>unique</code> 指针（有一个附加的删除器和一些删除器的上下文），它也记录了其数据的设备是什么。</p><p><code>nullptr</code> <code>DataPtr</code> 仍然可以有一个非平凡的设备；这允许我们将零大小的分配与非零分配统一对待。</p><p><code>DatePtr</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C10_API</span> <span class="title">DataPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    c10::detail::UniqueVoidPtr ptr_;</span><br><span class="line">    Device device_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DataPtr</span>() : <span class="built_in">ptr_</span>(), <span class="built_in">device_</span>(DeviceType::CPU) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">void</span>* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* some getter-setter method : call ptr_ */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">bool</span>&gt;(ptr_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function">T* <span class="title">cast_context</span><span class="params">(DeleterFnPtr expected_deleter)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_.cast_context&lt;T&gt;(expected_deleter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function">C10_NODISCARD <span class="keyword">bool</span> <span class="title">compare_exchange_deleter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        DeleterFnPtr expected_deleter,</span></span></span><br><span class="line"><span class="params"><span class="function">        DeleterFnPtr new_deleter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_.<span class="built_in">compare_exchange_deleter</span>(expected_deleter, new_deleter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>DataPtr</code> 有两个成员变量：之前介绍的 <code>UniqueVoidPtr</code> 类型的 <code>ptr_</code> 以及设备类型的 <code>device_</code> 。大部分方法也就是去调用 <code>ptr_</code> 相应的方法。</p><p><code>Allocator</code> 类：</p><p>在某些情况下，上下文与数据指针完全相同。在这种情况下，我们可以支持 <code>raw</code> 分配和释放接口。这就是 <code>raw_deleter</code> 的含义。默认情况下，它返回一个 <code>nullptr</code> ，这意味着 <code>raw</code> 接口没有被实现。请确保尽可能地实现它，否则 <code>raw</code> 接口将被错误地报告为不支持，而实际上它是可能的。</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">Allocator</span> &#123;</span></span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Allocator</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> DataPtr <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> DeleterFnPtr <span class="title">raw_deleter</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span>* <span class="title">raw_allocate</span><span class="params">(<span class="keyword">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> dptr = <span class="built_in">allocate</span>(n);</span><br><span class="line">    <span class="built_in">AT_ASSERT</span>(dptr.<span class="built_in">get</span>() == dptr.<span class="built_in">get_context</span>());</span><br><span class="line">    <span class="keyword">return</span> dptr.<span class="built_in">release_context</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">raw_deallocate</span><span class="params">(<span class="keyword">void</span>* ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> d = <span class="built_in">raw_deleter</span>();</span><br><span class="line">    <span class="built_in">AT_ASSERT</span>(d);</span><br><span class="line">    <span class="built_in">d</span>(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h1 id="storage"   >          <a href="#storage" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#storage"></a> Storage</h1>      <p>存储器代表张量的底层支持数据缓冲区。这个概念是从最初的 <code>Torch7</code> 代码库中继承下来的；我们有点想摆脱这个概念，但这是一项艰苦的工作，而且没有人去做。</p><p>注意：存储应该是唯一拥有数据指针的；例如，两个非空的数据指针只有当它们来自同一个存储时才有别名。从技术上讲，你可以违反这个不变性（例如，你可以用 <code>at::from_blob</code> 创建一个不拥有的 <code>StorageImpl</code>），但是很多事情都不能正常工作，包括：</p><ul><li>在这样的存储上使用普通的删除器是错误的，因为普通的删除器假设是唯一的所有权，但如果你有两个存储在同一个数据，这意味着存在某种共享的所有权。所以你的删除器实际上必须在内部做某种引用计数的事情</li><li>Python 方面的深复制依赖于存储的平等，而不是数据指针的平等；所以如果有两个独立的存储指向同一个数据，在这种情况下，数据实际上会被重复（一个数据指针在前，两个数据指针在后）</li><li>版本计数不会正常工作，因为我们在存储层面上进行所有的版本计数跟踪（除非你明确地用 <code>detach</code> 断开版本计数的连接）；由于数据指针相同的突变是完全没有被跟踪的</li></ul><p><code>Storage</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">Storage</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">use_byte_size_t</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Storage</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Storage</span>(c10::intrusive_ptr&lt;StorageImpl&gt; ptr)</span><br><span class="line">        : <span class="built_in">storage_impl_</span>(std::<span class="built_in">move</span>(ptr)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Storage</span>(</span><br><span class="line">        <span class="keyword">use_byte_size_t</span> use_byte_size,</span><br><span class="line">        <span class="keyword">size_t</span> size_bytes,</span><br><span class="line">        Allocator* allocator = <span class="literal">nullptr</span>,</span><br><span class="line">        <span class="keyword">bool</span> resizable = <span class="literal">false</span>)</span><br><span class="line">        : <span class="built_in">storage_impl_</span>(c10::make_intrusive&lt;StorageImpl&gt;(</span><br><span class="line">                StorageImpl::<span class="built_in">use_byte_size_t</span>(),</span><br><span class="line">                size_bytes,</span><br><span class="line">                allocator,</span><br><span class="line">                resizable)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function">T* <span class="title">data</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage_impl_-&gt;data&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_alias_of</span><span class="params">(<span class="keyword">const</span> Storage&amp; other)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage_impl_ == other.storage_impl_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UniqueStorageShareExternalPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">void</span>* src,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">size_t</span> capacity,</span></span></span><br><span class="line"><span class="params"><span class="function">        DeleterFnPtr d = <span class="literal">nullptr</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!storage_impl_.<span class="built_in">unique</span>()) &#123;</span><br><span class="line">            <span class="built_in">TORCH_CHECK</span>(</span><br><span class="line">                <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;UniqueStorageShareExternalPointer can only be called when use_count == 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        storage_impl_-&gt;<span class="built_in">UniqueStorageShareExternalPointer</span>(src, capacity, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    c10::intrusive_ptr&lt;StorageImpl&gt; storage_impl_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>里面大部分方法都是调用了下面的：<br /><code>StorageImpl</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">StorageImpl</span> :</span> <span class="keyword">public</span> c10::intrusive_ptr_target &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">use_byte_size_t</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StorageImpl</span>(</span><br><span class="line">        <span class="keyword">use_byte_size_t</span> use_byte_size,</span><br><span class="line">        <span class="keyword">size_t</span> size_bytes,</span><br><span class="line">        at::DataPtr data_ptr,</span><br><span class="line">        at::Allocator* allocator,</span><br><span class="line">        <span class="keyword">bool</span> resizable)</span><br><span class="line">        : <span class="built_in">data_ptr_</span>(std::<span class="built_in">move</span>(data_ptr)),</span><br><span class="line">            <span class="built_in">size_bytes_</span>(size_bytes),</span><br><span class="line">            <span class="built_in">resizable_</span>(resizable),</span><br><span class="line">            <span class="built_in">received_cuda_</span>(<span class="literal">false</span>),</span><br><span class="line">            <span class="built_in">allocator_</span>(allocator) &#123;</span><br><span class="line">        <span class="keyword">if</span> (resizable) &#123;</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT</span>(</span><br><span class="line">                allocator_, <span class="string">&quot;For resizable storage, allocator must be provided&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* other constructor, destructor and operator= */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data_ptr_.<span class="built_in">clear</span>();</span><br><span class="line">        size_bytes_ = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T* <span class="title">data</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe_data&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T* <span class="title">unsafe_data</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T*&gt;(<span class="keyword">this</span>-&gt;data_ptr_.<span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">release_resources</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        data_ptr_.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* some getter-setter method */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the previous data_ptr</span></span><br><span class="line">    <span class="function">at::DataPtr <span class="title">set_data_ptr</span><span class="params">(at::DataPtr&amp;&amp; data_ptr)</span> </span>&#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(data_ptr_, data_ptr);</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">move</span>(data_ptr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Can only be called when use_count is 1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UniqueStorageShareExternalPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        at::DataPtr&amp;&amp; data_ptr,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">size_t</span> size_bytes)</span> </span>&#123;</span><br><span class="line">        data_ptr_ = std::<span class="built_in">move</span>(data_ptr);</span><br><span class="line">        size_bytes_ = size_bytes;</span><br><span class="line">        allocator_ = <span class="literal">nullptr</span>;</span><br><span class="line">        resizable_ = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataPtr data_ptr_;</span><br><span class="line">    <span class="keyword">size_t</span> size_bytes_;</span><br><span class="line">    <span class="keyword">bool</span> resizable_;</span><br><span class="line">    <span class="comment">// Identifies that Storage was received from another process and doesn&#x27;t have</span></span><br><span class="line">    <span class="comment">// local to process cuda memory allocation</span></span><br><span class="line">    <span class="keyword">bool</span> received_cuda_;</span><br><span class="line">    Allocator* allocator_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>StorageImpl</code> 有 5 个成员变量，主要有 <code>DataPtr</code> 类型的 <code>data_ptr_</code> 和指向 <code>Allocator</code> 的指针 <code>allocator_</code> 。</p>        <h1 id="tensorimpl"   >          <a href="#tensorimpl" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tensorimpl"></a> TensorImpl</h1>              <h2 id="placementdeletecontext"   >          <a href="#placementdeletecontext" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#placementdeletecontext"></a> PlacementDeleteContext</h2>      <p>首先介绍一个将在解构期间调用额外的放置删除器的上下文 <code>PlacementDeleteContext</code> 。</p><p>接受一个已经构建好的 <code>DataPtr</code> 并在销毁时将其存储为成员，我们将在  <code>DataPtr</code> 被销毁之前调用底层数据指针的额外删除器。<code>data_ptr_</code> 拥有该内存。</p><p><code>PlacementDeleteContext</code> 类：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">PlacementDeleteContext</span> &#123;</span></span><br><span class="line">    DataPtr data_ptr_;</span><br><span class="line">    PlacementDtor placement_dtor_;</span><br><span class="line">    <span class="keyword">size_t</span> size_;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PlacementDeleteContext</span>(</span><br><span class="line">        DataPtr&amp;&amp; data_ptr,</span><br><span class="line">        PlacementDtor placement_dtor,</span><br><span class="line">        <span class="keyword">size_t</span> size)</span><br><span class="line">        : <span class="built_in">data_ptr_</span>(std::<span class="built_in">move</span>(data_ptr)),</span><br><span class="line">            <span class="built_in">placement_dtor_</span>(placement_dtor),</span><br><span class="line">            <span class="built_in">size_</span>(size) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> DataPtr <span class="title">makeDataPtr</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        DataPtr&amp;&amp; data_ptr,</span></span></span><br><span class="line"><span class="params"><span class="function">        PlacementDtor placement_dtor,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">size_t</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">        Device device)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">PlacementDeleteContext</span>() &#123;</span><br><span class="line">        <span class="built_in">placement_dtor_</span>(data_ptr_.<span class="built_in">get</span>(), size_);</span><br><span class="line">        <span class="comment">// original memory will be freed when data_ptr_ is destructed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>其中：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PlacementDtor = <span class="built_in"><span class="keyword">void</span></span> (*)(<span class="keyword">void</span>*, <span class="keyword">size_t</span>);</span><br></pre></td></tr></table></div></figure><p>即 <code>PlacementDtor</code> 是一个接受无类型指针以及 <code>size_t</code> 形参的无返回值的函数指针。</p><p>在构造函数中，<code>DataPtr</code> 接受的是右值引用，并且用移动语义 <code>std::move</code> 进行初始化，因此 <code>data_ptr</code> 是已经构建好的。在析构函数中，调用 <code>placement_dtor_</code> 并将数据指针的数据以及 <code>size_</code> 作为参数传递。</p><p>还有 <code>makeDataPtr</code> 的实现：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletePlacementDeleteContext</span><span class="params">(<span class="keyword">void</span>* ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">static_cast</span>&lt;PlacementDeleteContext*&gt;(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">at::DataPtr <span class="title">PlacementDeleteContext::makeDataPtr</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    at::DataPtr&amp;&amp; data_ptr,</span></span></span><br><span class="line"><span class="params"><span class="function">    PlacementDtor placement_dtor,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">size_t</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">    at::Device device)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span>* ptr = data_ptr.<span class="built_in">get</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      ptr,</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">PlacementDeleteContext</span>(std::<span class="built_in">move</span>(data_ptr), placement_dtor, size),</span><br><span class="line">      &amp;deletePlacementDeleteContext,</span><br><span class="line">      device&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>回顾一下上面提到的 <code>DataPtr</code> 的构造函数，这里取出数据指针的数据，并构造一个 <code>PlacementDeleteContext</code> 作为上下文，使用 <code>deletePlacementDeleteContext</code> 作为删除器，还有平凡的 <code>device</code> 。</p>        <h2 id="autogradmetainterface"   >          <a href="#autogradmetainterface" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#autogradmetainterface"></a> AutogradMetaInterface</h2>      <p><code>AutogradMetaInterface</code> 类：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">AutogradMetaInterface</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">set_requires_grad</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> requires_grad,</span></span></span><br><span class="line"><span class="params"><span class="function">        at::TensorImpl* self_impl)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">requires_grad</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> at::Tensor&amp; <span class="title">mutable_grad</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> at::Tensor&amp; <span class="title">grad</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> at::Tensor&amp; <span class="title">fw_grad</span><span class="params">(<span class="keyword">uint64_t</span> level, <span class="keyword">const</span> at::TensorBase&amp; self)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">set_fw_grad</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> at::TensorBase&amp; new_grad,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> at::TensorBase&amp; self,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">uint64_t</span> level,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> is_inplace_op)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AutogradMetaInterface</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p><code>AutogradMetaInterface</code> 类内全是抽象方法，可以去看一下继承它的 <a href="https://aurumting.cn/2021/12/05/PyTorch_autograd/"><code>AutogradMeta</code></a></p>        <h2 id="pyinterpreter"   >          <a href="#pyinterpreter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pyinterpreter"></a> PyInterpreter</h2>      <p>我们在 <code>TensorImpl</code> 上存储了一个 <code>PyObject</code> ，这样我们就可以有效地将张量翻译成 <code>Python</code> 表示法。然而，在某些情况下（<code>torchdeploy</code>），一个进程中可能有多个 <code>Python</code> 解释器，我们必须注意不要意外地将 <code>PyObjects</code> 与错误的解释器混淆。因此，我们也用它所对应的 <code>Python</code> 解释器来标记每个 <code>TensorImpl</code> 。</p><p>在 <code>torchdeploy</code> 中，我们有这些不变性：</p><ul><li>任何给定的 <code>TensorImpl</code> 最多可以与一个 <code>Python</code> 解释器相关联。我们将解释器标签表示为一个虚拟类实例的内存地址，每个解释器分配一次（这是为了在必要时，我们可以请求解释器为我们执行操作）</li><li>一个给定的 <code>TensorImpl</code> 的解释器标签只能从未初始化到被标记；一旦被标记，这就是一个静止状态（一旦被标记到一个解释器，就永远被标记到那个解释器）</li><li>当且仅当一个线程持有标记在 <code>TensorImpl</code> 上的解释器的 GIL 时，它可以改变 <code>TensorImpl</code> 的 <code>PyObject</code> 字段。（如果 <code>TensorImpl</code> 没有被标记，它必须首先原子化地要求它的标记，然后才能有效地写入）</li></ul><p><code>PyInterpreter</code> 对象本身是一个包含一些与解释器交互的函数指针的类。目前这只是为了调试，但如果一个 <code>Tensor</code> 可以拥有一个 <code>PyObject</code> ，解释器就可以用来释放它。</p><p>警告：这个类必须非常小心地编写，因为一个 <code>Tensor</code> 有可能引用一个对应于已经被卸载的共享库的解释器。这使得盲目地调用虚拟方法变得非常危险，因为 <code>vtable</code> 在那个时候可能是垃圾（在一个好的日子里，你可能得到 “纯虚拟方法被调用”）。</p><p>解决这个问题的想法是，我们总是泄露 <code>PyInterpreters</code>（所以即使在 <code>dlclose</code> 之后，它们也一直是活的），并通过用函数指针取代它们来解除 “虚拟方法”，而这些指针只是没有作用。这不能用传统的 C++ <code>vtable</code> 来做，所以我们必须推出我们自己的。</p><p>注意：将 <code>PyInterpreter</code> 标签表示为完整的对象的缺点是它在 <code>TensorImpl</code> 上需要一个额外的字。如果标签只是整数索引，在 64 位架构上，我们可以将标签和 <code>PyObject</code> 一起打包成一个原子字。在 32 位架构上，我们可以简单地说，只支持一个 <code>Python</code> 解释器 (如果试图设置一个非实质性的解释器标签，就会出错)。</p><p>这个方案的困难在于我们需要维护一个行外表来获取 <code>PyInterpreters</code> ，这样我们就可以对它们进行虚拟方法调用，而且对这个表的注册/解注册必须以线程安全的方式进行。如果可能的 <code>PyInterpreters</code> 的数量足够小（例如，8 位整数），这可以很容易做到，只需预先分配一个足够大的数组来容纳所有可能的解释器。 当然，128 个线程对任何人来说都是绰绰有余的！</p><p>我目前没有决定采用这种技术，因为 <code>PyInterpreter</code> 标签所增加的额外字数使我们的字数达到了 24 个，这意味着我们仍然适合在三条 8 字缓存线内。如果你需要分文不取，可以考虑这样做！</p><p><code>PyInterpreter</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PyInterpreter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">PyInterpreter</span> &#123;</span></span><br><span class="line">    <span class="keyword">using</span> name_sig = std::<span class="built_in">string</span>(<span class="keyword">const</span> PyInterpreter*);</span><br><span class="line">    <span class="keyword">using</span> decref_sig = <span class="built_in"><span class="keyword">void</span></span>(<span class="keyword">const</span> PyInterpreter*, PyObject*, <span class="keyword">bool</span>);</span><br><span class="line">    <span class="keyword">using</span> detach_sig =</span><br><span class="line">        c10::intrusive_ptr&lt;TensorImpl&gt;(<span class="keyword">const</span> PyInterpreter*, <span class="keyword">const</span> TensorImpl*);</span><br><span class="line">    <span class="keyword">using</span> dispatch_sig = <span class="built_in"><span class="keyword">void</span></span>(</span><br><span class="line">        <span class="keyword">const</span> PyInterpreter*,</span><br><span class="line">        <span class="keyword">const</span> c10::OperatorHandle&amp;,</span><br><span class="line">        torch::jit::Stack* stack,</span><br><span class="line">        <span class="keyword">const</span> std::shared_ptr&lt;TorchDispatchTypeObject&gt;&amp; type);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PyInterpreter</span>(</span><br><span class="line">        name_sig* name_fn,</span><br><span class="line">        decref_sig* decref_fn,</span><br><span class="line">        detach_sig* detach,</span><br><span class="line">        dispatch_sig* dispatch)</span><br><span class="line">        : <span class="built_in">name_fn_</span>(name_fn),</span><br><span class="line">            <span class="built_in">decref_fn_</span>(decref_fn),</span><br><span class="line">            <span class="built_in">detach_fn_</span>(detach),</span><br><span class="line">            <span class="built_in">dispatch_fn_</span>(dispatch) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    name_sig* name_fn_;</span><br><span class="line">    decref_sig* decref_fn_;</span><br><span class="line">    detach_sig* detach_fn_;</span><br><span class="line">    dispatch_sig* dispatch_fn_;</span><br><span class="line"></span><br><span class="line">    <span class="function">__ubsan_ignore_function__ std::string <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*name_fn_)(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function">__ubsan_ignore_function__ <span class="keyword">void</span> <span class="title">decref</span><span class="params">(PyObject* pyobj, <span class="keyword">bool</span> is_tensor)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*decref_fn_)(<span class="keyword">this</span>, pyobj, is_tensor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">__ubsan_ignore_function__ c10::intrusive_ptr&lt;TensorImpl&gt; <span class="title">detach</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> TensorImpl* self)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*detach_fn_)(<span class="keyword">this</span>, self);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invoke the Python boxed fallback dispatch to go back into Python</span></span><br><span class="line">    <span class="function">__ubsan_ignore_function__ <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> c10::OperatorHandle&amp; op,</span></span></span><br><span class="line"><span class="params"><span class="function">        torch::jit::Stack* stack,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> std::shared_ptr&lt;TorchDispatchTypeObject&gt;&amp; type)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*dispatch_fn_)(<span class="keyword">this</span>, op, stack, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disarm</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="torchdispatchtypeobject"   >          <a href="#torchdispatchtypeobject" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#torchdispatchtypeobject"></a> TorchDispatchTypeObject</h2>      <p>一个 <code>TorchDispatchTypeObject</code> 表示一个有 <code>__torch_dispatch__</code> 类方法的 <code>Tensor</code> 子类的类型。具体来说，它持有该类的 <code>PyObject*</code> 和 <code>PyInterpreter*</code> ，后者表示该类来自哪个 <code>python</code> 解释器。</p><p><code>TorchDispatchTypeObject</code> 类：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">TorchDispatchTypeObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// Steals a reference to type_object</span></span><br><span class="line">    <span class="built_in">TorchDispatchTypeObject</span>(</span><br><span class="line">        PyObject* type_object,</span><br><span class="line">        c10::impl::PyInterpreter* pyinterpreter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Releases the stolen reference to type_object</span></span><br><span class="line">    ~<span class="built_in">TorchDispatchTypeObject</span>();</span><br><span class="line"></span><br><span class="line">    c10::<span class="function">impl::PyInterpreter* <span class="title">pyinterpreter</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">PyObject* <span class="title">ptr</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    PyObject* data_;</span><br><span class="line">    c10::impl::PyInterpreter* pyinterpreter_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="variableversion"   >          <a href="#variableversion" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#variableversion"></a> VariableVersion</h2>      <p>每个张量都有一个版本计数器。每当张量的数据或大小通过原地变量操作发生变化时，版本计数器就会被递增。版本计数器用于检测对已保存变量的修改，这些修改会导致不正确的梯度计算。版本计数器可以在变量之间共享：</p><ol><li>视图共享基础变量的版本计数器</li><li><code>x.detach()</code> 共享 <code>x</code> 的版本计数器</li><li>未打包的保存变量共享源变量的版本计数器</li></ol><p>版本计数器在这些情况下是不共享的：</p><ol><li>当我们通过调用 <code>set_data(...)</code> 替换一个变量的底层张量时</li><li><code>x.data</code> 不共享 <code>x</code> 的版本计数器。</li></ol><p>为什么我们把版本计数器放在 <code>TensorImpl</code> 而不是 <code>AutogradMeta</code> 中？</p><p>回答：在 <code>Variable/Tensor</code> 合并后，当一个张量的 <code>requires_grad_</code> 为 <code>false</code> 时，它将没有 <code>AutogradMeta</code> ，但当我们在一个函数的前向传播中使用这个张量时，需要保存这个张量以备反向，我们需要跟踪这个张量的版本，以确保它在 <code>autograd</code> 图中始终有效。</p><p>为了实现这个目标，我们把版本计数器放在 <code>TensorImpl</code> 而不是 <code>AutogradMeta</code> 中，并让它始终可用。这允许我们在张量不需要梯度的时候有不携带 <code>AutogradMeta</code> 的优化。</p><p>实现这一目标的一个假设的替代方法是初始化 <code>AutogradMeta</code> ，并在不需要梯度的张量被保存为反向时才为其创建版本计数器。然而，由于为反向保存张量发生在前向传播中，而我们的不变式是前向传播需要是线程安全的，所以当我们在多线程情况下运行前向传播时，懒惰初始化 <code>AutogradMeta</code> 会引入竞争条件，从而使前向传递不再是线程安全的，这就破坏了不变式。</p><p><code>VariableVersion</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">VariableVersion</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VersionCounter</span> :</span> intrusive_ptr_target &#123;</span><br><span class="line">        <span class="built_in">VersionCounter</span>(<span class="keyword">uint32_t</span> version) : <span class="built_in">version_</span>(version) &#123;&#125;</span><br><span class="line">        std::atomic&lt;<span class="keyword">uint32_t</span>&gt; version_;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    c10::intrusive_ptr&lt;VersionCounter&gt; version_counter_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Disabled</span> &#123;</span> DISABLED &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">unique</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version_counter_ ? <span class="number">1</span> == version_counter_.<span class="built_in">use_count</span>() : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">VariableVersion</span>(<span class="keyword">uint32_t</span> version)</span><br><span class="line">        : <span class="built_in">version_counter_</span>(c10::make_intrusive&lt;VersionCounter&gt;(version)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">enabled</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version_counter_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (version_counter_) &#123;</span><br><span class="line">            ++version_counter_-&gt;version_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inference tensor doesn&#x27;t have version counter so it shouldn&#x27;t be</span></span><br><span class="line">    <span class="comment">// accessed.</span></span><br><span class="line">    <span class="function"><span class="keyword">uint32_t</span> <span class="title">current_version</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version_counter_-&gt;version_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>        <h2 id="tensorimpl-2"   >          <a href="#tensorimpl-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tensorimpl-2"></a> TensorImpl</h2>      <p>张量的底层表示，它包含一个指向存储（包含实际数据）和元数据（例如，大小和跨度）的指针，描述了数据作为张量的这个特定视图。</p><p>关于我们的张量的内存表示法的一些基本特征：</p><ul><li><p>它包含一个指向存储结构（<code>Storage/StorageImpl</code>）的指针，该结构包含指向实际数据的指针，并记录数据类型和视图的设备。这允许多个张量别名相同的底层数据，这允许在一个张量上有效地实现不同的 <em>视图</em>。</p></li><li><p>张量结构本身记录了关于张量的特定视图元数据，例如，大小、跨度和进入存储的偏移量。一个存储的每个视图可以有不同的大小或偏移。</p></li><li><p>这个类是侵入式的引用计数。它是引用计数的，所以我们可以支持大型张量的及时释放；它是侵入式的引用计数的，所以我们仍然可以对原始指针进行引用计数的操作，这在跨语言边界传递张量时往往更方便。</p></li><li><p>出于向后兼容的原因，一个张量可能处于未初始化的状态。一个张量可以通过以下两种方式被未初始化：</p><ul><li>张量可以是数据类型未初始化。这种形式的张量有一个未初始化的 <code>dtype</code> 。这种情况最常出现在用户写 <code>Tensor x(CPU)</code> 的时候。当第一次调用 <code>mutable_data&lt;T&gt;()</code> 时，<code>dtype</code> 和随后被初始化</li><li>一个张量可能是存储未初始化。这种形式的张量有非零的大小，但是有一个带有空数据指针的存储。这种情况最常出现在用户调用 <code>Resize()</code> 或 <code>FreeMemory()</code> 时。这是因为 <code>Caffe2</code> 在历史上进行了懒惰分配：在调用 <code>mutable_data&lt;T&gt;()</code> 之前，数据的分配不会发生。一个零大小的张量总是被存储初始化，因为在这种情况下不需要分配。</li></ul><p>这两种未初始化的状态的所有组合都是可能的。</p><p>张量上的所有其他字段总是被初始化。特别是，大小总是有效的。（历史上，一个声明为 <code>Tensor x(CPU)</code> 的张量也有未初始化的大小，编码为 <code>numel == -1</code> ，但我们现在决定默认为零大小，结果是 <code>numel == 0</code>）。</p><p>未初始化的存储空间必须是唯一拥有的，以保持我们的模型简单。因此，我们将拒绝那些可能导致未初始化的存储空间变成共享的操作（或者共享的存储空间变成未初始化的，例如来自 <code>FreeMemory</code>）。</p><p>在实践中，存储未初始化和数据类型未初始化的张量是 <em>极端</em> 短暂的：基本上，在你做了 <code>Resize()</code> 之后，你基本上总是在之后立即调用 <code>mutable_data()</code> 。如果给定一个存储未初始化的、数据类型未初始化的张量，大多数函数都不能工作。</p><p>我们打算消除所有未初始化的状态，因此每个张量在所有字段都是完全初始化的。请不要编写依赖这些未初始化状态的新代码。</p></li></ul><p><code>TensorImpl</code> 类（删减版）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C10_API</span> <span class="title">TensorImpl</span> :</span> <span class="keyword">public</span> c10::intrusive_ptr_target &#123;</span><br><span class="line">    <span class="built_in">TensorImpl</span>() = <span class="keyword">delete</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ImplType</span> &#123;</span> VIEW &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Construct a 1-dim 0-size tensor backed by the given storage.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">TensorImpl</span>(</span><br><span class="line">        Storage&amp;&amp; storage,</span><br><span class="line">        DispatchKeySet,</span><br><span class="line">        <span class="keyword">const</span> caffe2::TypeMeta data_type);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TensorImpl</span>(</span><br><span class="line">        ImplType,</span><br><span class="line">        Storage&amp;&amp; storage,</span><br><span class="line">        DispatchKeySet,</span><br><span class="line">        <span class="keyword">const</span> caffe2::TypeMeta data_type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Construct a 1-dim 0 size tensor that doesn&#x27;t have a storage.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">TensorImpl</span>(</span><br><span class="line">        DispatchKeySet,</span><br><span class="line">        <span class="keyword">const</span> caffe2::TypeMeta data_type,</span><br><span class="line">        c10::optional&lt;c10::Device&gt; device_opt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* other constructor */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TensorImpl</span>(</span><br><span class="line">        Storage&amp;&amp; storage,</span><br><span class="line">        DispatchKeySet,</span><br><span class="line">        <span class="keyword">const</span> caffe2::TypeMeta data_type,</span><br><span class="line">        c10::optional&lt;c10::Device&gt;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TensorImpl</span>(<span class="keyword">const</span> TensorImpl&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    TensorImpl&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> TensorImpl&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">TensorImpl</span>(TensorImpl&amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    TensorImpl&amp; <span class="keyword">operator</span>=(TensorImpl&amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">release_resources</span><span class="params">()</span> <span class="keyword">override</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        autograd_meta_.<span class="built_in">reset</span>();</span><br><span class="line">        <span class="keyword">if</span> (storage_) &#123;</span><br><span class="line">            storage_ = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (owns_pyobj_) &#123;</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT</span>(pyobj_interpreter_ != <span class="literal">nullptr</span>);</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT</span>(pyobj_ != <span class="literal">nullptr</span>);</span><br><span class="line">            pyobj_interpreter_.<span class="built_in">load</span>(std::memory_order_acquire)</span><br><span class="line">                -&gt;<span class="built_in">decref</span>(pyobj_, <span class="comment">/*is_tensor*/</span> <span class="literal">true</span>);</span><br><span class="line">            pyobj_ = <span class="literal">nullptr</span>; <span class="comment">// for safety</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the number of dimensions of this tensor.  Note that 0-dimension</span></span><br><span class="line"><span class="comment">    * represents a Tensor that is a Scalar, e.g., one that has a single element.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">TENSORIMPL_MAYBE_VIRTUAL <span class="keyword">int64_t</span> <span class="title">dim</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="meta">#<span class="meta-keyword">ifdef</span> C10_DISABLE_TENSORIMPL_EXTENSIBILITY</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sizes_and_strides_.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">     ;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">TENSORIMPL_MAYBE_VIRTUAL <span class="keyword">bool</span> <span class="title">is_contiguous</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        at::MemoryFormat memory_format = at::MemoryFormat::Contiguous)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">C10_UNLIKELY</span>(</span><br><span class="line">                has_contiguity_ !=</span><br><span class="line">                <span class="keyword">static_cast</span>&lt;<span class="keyword">uint8_t</span>&gt;(HasContiguityPolicy::Default))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">is_contiguous_nondefault_policy_impl</span>(memory_format);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">TORCH_INTERNAL_ASSERT_DEBUG_ONLY</span>(<span class="built_in">compute_contiguous</span>() == is_contiguous_);</span><br><span class="line">        <span class="keyword">if</span> (memory_format == at::MemoryFormat::ChannelsLast) &#123;</span><br><span class="line">            <span class="keyword">return</span> is_channels_last_contiguous_;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (memory_format == at::MemoryFormat::ChannelsLast3d) &#123;</span><br><span class="line">            <span class="keyword">return</span> is_channels_last_3d_contiguous_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> is_contiguous_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_contiguous_nondefault_policy_impl</span><span class="params">(at::MemoryFormat)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">is_contiguous_custom</span><span class="params">(at::MemoryFormat memory_format)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_sparse</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key_set_.<span class="built_in">has</span>(DispatchKey::SparseCPU) ||</span><br><span class="line">            key_set_.<span class="built_in">has</span>(DispatchKey::SparseCUDA) ||</span><br><span class="line">            key_set_.<span class="built_in">has</span>(DispatchKey::SparseHIP) ||</span><br><span class="line">            key_set_.<span class="built_in">has</span>(DispatchKey::SparseXPU);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* other is_xxx method */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inference tensor doesn&#x27;t have autograd or ADInplaceOrView key.</span></span><br><span class="line">    <span class="comment">// Invariant:</span></span><br><span class="line">    <span class="comment">//   Inference tensor has version_counter_.enabled() == false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_inference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> no_ADInplaceOrView = !key_set_.<span class="built_in">has</span>(c10::DispatchKey::ADInplaceOrView);</span><br><span class="line">        <span class="keyword">bool</span> no_Autograd = (key_set_ &amp; c10::autograd_dispatch_keyset).<span class="built_in">empty</span>();</span><br><span class="line">        <span class="keyword">return</span> no_ADInplaceOrView &amp;&amp; no_Autograd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Layout <span class="title">layout</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_sparse</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> kSparse;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">is_sparse_csr</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> kSparseCsr;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">is_mkldnn</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> kMkldnn;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> kStrided;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ~~~~~ Autograd API ~~~~~</span></span><br><span class="line">    <span class="comment">// Some methods below are defined in TensorImpl.cpp because Tensor is an</span></span><br><span class="line">    <span class="comment">// incomplete type.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set whether or not a tensor requires gradient.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_requires_grad</span><span class="params">(<span class="keyword">bool</span> requires_grad)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * True if a tensor requires gradient.  Tensors which require gradient</span></span><br><span class="line"><span class="comment">    * have history tracked for any operations performed on them, so that</span></span><br><span class="line"><span class="comment">    * we can automatically differentiate back to them.  A tensor that</span></span><br><span class="line"><span class="comment">    * requires gradient and has no history is a &quot;leaf&quot; tensor, which we</span></span><br><span class="line"><span class="comment">    * accumulate gradients into.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">requires_grad</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set whether or not to take the conjugate of the tensor (flip the imaginary</span></span><br><span class="line"><span class="comment">    * bit).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">void</span> _set_conj(<span class="keyword">bool</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">add</span>(DispatchKey::Conjugate);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">remove</span>(DispatchKey::Conjugate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set whether or not to take the conjugate of the tensor (flip the imaginary</span></span><br><span class="line"><span class="comment">    * bit).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">void</span> _set_neg(<span class="keyword">bool</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">add</span>(DispatchKey::Negative);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">remove</span>(DispatchKey::Negative);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the accumulated gradient of a tensor. This gradient is computed</span></span><br><span class="line"><span class="comment">    * using forward mode AD.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * This is an internal API that should never be used by end users.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The API is as follows:</span></span><br><span class="line"><span class="comment">    *   - &quot;level&quot; allows to specify the level of forward AD nesting for which the</span></span><br><span class="line"><span class="comment">    *     gradient should be returned. Note that since levels are not fully</span></span><br><span class="line"><span class="comment">    *     supported yet, this argument should be 0. See documentation for</span></span><br><span class="line"><span class="comment">    *     torch::autograd::enter_dual_level for more details about forward AD</span></span><br><span class="line"><span class="comment">    * nesting.</span></span><br><span class="line"><span class="comment">    *   - &quot;self&quot; should represent the Tensor whose forward grad is accessed. It</span></span><br><span class="line"><span class="comment">    * is required when dealing with view.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> at::Tensor&amp; _fw_grad(<span class="keyword">uint64_t</span> level, <span class="keyword">const</span> at::TensorBase&amp; self) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the forward gradient for this Tensor.</span></span><br><span class="line"><span class="comment">    * The given Tensor might not be used directly and its content will be copied.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">void</span> _set_fw_grad(</span><br><span class="line">        <span class="keyword">const</span> at::TensorBase&amp; new_grad,</span><br><span class="line">        <span class="keyword">const</span> at::TensorBase&amp; self,</span><br><span class="line">        <span class="keyword">uint64_t</span> level,</span><br><span class="line">        <span class="keyword">bool</span> is_inplace_op);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a typed data pointer to the actual data which this tensor refers to.</span></span><br><span class="line"><span class="comment">    * This checks that the requested type (from the template parameter) matches</span></span><br><span class="line"><span class="comment">    * the internal type of the tensor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T* <span class="title">data</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data_ptr_impl&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * More efficient helper for Tensor::data_ptr(). Like data&lt;T&gt;(), but</span></span><br><span class="line"><span class="comment">    * does not do a type check. Unlike the untemplated data(), does</span></span><br><span class="line"><span class="comment">    * check has_storage() and storage_initialized().</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T* <span class="title">data_ptr_impl</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Caller does the type check.</span></span><br><span class="line">        <span class="keyword">return</span> storage_.unsafe_data&lt;T&gt;() + storage_offset_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a void* data pointer to the actual data which this tensor refers to.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * It is invalid to call data() on a dtype-uninitialized tensor, even if the</span></span><br><span class="line"><span class="comment">    * size is 0.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span>* <span class="title">data</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(</span><br><span class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(storage_.<span class="built_in">data</span>()) +</span><br><span class="line">            data_type_.<span class="built_in">itemsize</span>() * storage_offset_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Like data&lt;T&gt;(), but performs no checks.  You are responsible for ensuring</span></span><br><span class="line"><span class="comment">    * that all invariants required by data() are upheld here.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T* <span class="title">unsafe_data</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage_.unsafe_data&lt;T&gt;() + storage_offset_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">tensorimpl_type_name</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TensorImpl&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    [[noreturn]] <span class="function"><span class="keyword">void</span> <span class="title">throw_storage_access_error</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * True if a tensor has no elements (e.g., numel() == 0).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">numel</span>() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Change the size at some dimension.  This DOES NOT update strides;</span></span><br><span class="line"><span class="comment">    * thus, most changes to size will not preserve contiguity.  You probably</span></span><br><span class="line"><span class="comment">    * also want to call set_stride() when you call this.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">set_size</span><span class="params">(<span class="keyword">int64_t</span> dim, <span class="keyword">int64_t</span> new_size)</span> </span>&#123;</span><br><span class="line">        sizes_and_strides_.<span class="built_in">size_at</span>(dim) = new_size;</span><br><span class="line">        <span class="built_in">refresh_numel</span>();</span><br><span class="line">        <span class="built_in">refresh_contiguous</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Change the stride at some dimension.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">set_stride</span><span class="params">(<span class="keyword">int64_t</span> dim, <span class="keyword">int64_t</span> new_stride)</span> </span>&#123;</span><br><span class="line">        sizes_and_strides_.<span class="built_in">stride_at_unchecked</span>(dim) = new_stride;</span><br><span class="line">        <span class="built_in">refresh_contiguous</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Like set_sizes_and_strides but assumes contiguous strides.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_sizes_contiguous</span><span class="params">(IntArrayRef new_size)</span> </span>&#123;</span><br><span class="line">        sizes_and_strides_.<span class="built_in">set_sizes</span>(new_size);</span><br><span class="line">        <span class="built_in">refresh_numel</span>();</span><br><span class="line">        <span class="built_in">empty_tensor_restride</span>(MemoryFormat::Contiguous);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the sizes and strides of a tensor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_sizes_and_strides</span><span class="params">(IntArrayRef new_size, IntArrayRef new_stride)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> new_dim = new_size.<span class="built_in">size</span>();</span><br><span class="line">        sizes_and_strides_.<span class="built_in">set_sizes</span>(new_size);</span><br><span class="line">        <span class="keyword">if</span> (new_dim &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> dim = new_dim - <span class="number">1</span>;; dim--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (new_stride[dim] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    sizes_and_strides_.<span class="built_in">stride_at_unchecked</span>(dim) = new_stride[dim];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dim == new_dim - <span class="number">1</span>) &#123;</span><br><span class="line">                        sizes_and_strides_.<span class="built_in">stride_at_unchecked</span>(dim) = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sizes_and_strides_.<span class="built_in">stride_at_unchecked</span>(dim) =</span><br><span class="line">                            std::max&lt;<span class="keyword">int64_t</span>&gt;(</span><br><span class="line">                                sizes_and_strides_.<span class="built_in">size_at_unchecked</span>(dim + <span class="number">1</span>), <span class="number">1</span>) *</span><br><span class="line">                            sizes_and_strides_.<span class="built_in">stride_at_unchecked</span>(dim + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dim == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">refresh_numel</span>();</span><br><span class="line">        <span class="built_in">refresh_contiguous</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the size of a tensor at some dimension.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int64_t</span> <span class="title">size</span><span class="params">(<span class="keyword">int64_t</span> d)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the stride of a tensor at some dimension.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int64_t</span> <span class="title">stride</span><span class="params">(<span class="keyword">int64_t</span> d)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the pointer to autograd metadata.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_autograd_meta</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        std::unique_ptr&lt;c10::AutogradMetaInterface&gt; autograd_meta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the pointer to autograd metadata.  May return nullptr if the</span></span><br><span class="line"><span class="comment">    * tensor does not track gradients.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">c10::AutogradMetaInterface* <span class="title">autograd_meta</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the pointer to named tensor metadata.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_named_tensor_meta</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        std::unique_ptr&lt;c10::NamedTensorMetaInterface&gt; named_tensor_meta)</span> </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">        <span class="keyword">if</span> (named_tensor_meta) &#123;</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT</span>(named_tensor_meta-&gt;<span class="built_in">slow_dim</span>() == <span class="built_in">dim</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        named_tensor_meta_ = std::<span class="built_in">move</span>(named_tensor_meta);</span><br><span class="line">        <span class="keyword">if</span> (named_tensor_meta_ == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">remove</span>(DispatchKey::Named);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">add</span>(DispatchKey::Named);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_python_dispatch</span><span class="params">(<span class="keyword">bool</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k) &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">add</span>(DispatchKey::Python);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            key_set_ = key_set_.<span class="built_in">remove</span>(DispatchKey::Python);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the pointer to named tensor metadata.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> c10::NamedTensorMetaInterface* <span class="title">named_tensor_meta</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> named_tensor_meta_.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">has_compatible_shallow_copy_type</span><span class="params">(DispatchKeySet from)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> is_dense = [](DispatchKeySet ts) &#123;</span><br><span class="line">        <span class="keyword">return</span> ts.<span class="built_in">has</span>(DispatchKey::CPU) || ts.<span class="built_in">has</span>(DispatchKey::CUDA) ||</span><br><span class="line">            ts.<span class="built_in">has</span>(DispatchKey::HIP) || ts.<span class="built_in">has</span>(DispatchKey::XPU);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> is_sparse = [](DispatchKeySet ts) &#123;</span><br><span class="line">        <span class="keyword">return</span> ts.<span class="built_in">has</span>(DispatchKey::SparseCPU) ||</span><br><span class="line">            ts.<span class="built_in">has</span>(DispatchKey::SparseCUDA) || ts.<span class="built_in">has</span>(DispatchKey::SparseHIP) ||</span><br><span class="line">            ts.<span class="built_in">has</span>(DispatchKey::SparseXPU);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> (key_set_ == from) || (<span class="built_in">is_dense</span>(key_set_) &amp;&amp; <span class="built_in">is_dense</span>(from)) ||</span><br><span class="line">            (<span class="built_in">is_sparse</span>(key_set_) &amp;&amp; <span class="built_in">is_sparse</span>(from));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a TensorImpl that is a shallow-copy of this TensorImpl.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> c10::intrusive_ptr&lt;TensorImpl&gt; <span class="title">shallow_copy_and_detach</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> c10::VariableVersion&amp; version_counter,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> allow_tensor_metadata_change)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a TensorImpl that is a shallow-copy of this TensorImpl.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> c10::intrusive_ptr&lt;TensorImpl&gt; <span class="title">shallow_copy_and_detach</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        c10::VariableVersion&amp;&amp; version_counter,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> allow_tensor_metadata_change)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Shallow-copies data from another TensorImpl into this TensorImpl.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">shallow_copy_from</span><span class="params">(<span class="keyword">const</span> c10::intrusive_ptr&lt;TensorImpl&gt;&amp; impl)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">copy_tensor_metadata</span>(</span><br><span class="line">            <span class="comment">/*src_impl=*/</span>impl.<span class="built_in">get</span>(),</span><br><span class="line">            <span class="comment">/*dest_impl=*/</span><span class="keyword">this</span>,</span><br><span class="line">            <span class="comment">/*version_counter=*/</span><span class="built_in">version_counter</span>(),</span><br><span class="line">            <span class="comment">/*allow_tensor_metadata_change=*/</span><span class="built_in">allow_tensor_metadata_change</span>());</span><br><span class="line">        <span class="built_in">refresh_numel</span>();</span><br><span class="line">        <span class="built_in">refresh_contiguous</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query the PyObject interpreter.  This may return null if there is no</span></span><br><span class="line">    <span class="comment">// interpreter.  This is racy!</span></span><br><span class="line">    <span class="function">impl::PyInterpreter* <span class="title">pyobj_interpreter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pyobj_interpreter_.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">c10::optional&lt;c10::Device&gt; <span class="title">device_opt</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> device_opt_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief Extends the outer-most dimension of this tensor by num elements,</span></span><br><span class="line"><span class="comment">    * preserving the existing data.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The underlying data may be reallocated in order to accommodate the new</span></span><br><span class="line"><span class="comment">    * elements, in which case this tensors&#x27; capacity is grown at a factor of</span></span><br><span class="line"><span class="comment">    * growthPct. This ensures that Extend runs on an amortized O(1) time</span></span><br><span class="line"><span class="comment">    * complexity.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * This op is auto-asynchronous if the underlying device (CUDA) supports it.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Extend</span><span class="params">(<span class="keyword">int64_t</span> num, <span class="keyword">float</span> growthPct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> SizesVector = SmallVector&lt;<span class="keyword">int64_t</span>, <span class="number">5</span>&gt;;</span><br><span class="line">        <span class="function">SizesVector <span class="title">newDims</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            sizes_and_strides_.sizes_begin(), sizes_and_strides_.sizes_end())</span></span>;</span><br><span class="line">        newDims[<span class="number">0</span>] += num;</span><br><span class="line">        <span class="keyword">if</span> (!storage_.<span class="built_in">data</span>()) &#123;</span><br><span class="line">            <span class="built_in">Resize</span>(newDims);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">auto</span> newNumel =</span><br><span class="line">            c10::<span class="built_in">multiply_integers</span>(newDims.<span class="built_in">begin</span>(), newDims.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (newNumel * data_type_.<span class="built_in">itemsize</span>() &lt;= storage_.<span class="built_in">nbytes</span>()) &#123;</span><br><span class="line">            sizes_and_strides_.<span class="built_in">set_sizes</span>(newDims);</span><br><span class="line">            numel_ = newNumel;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">SizesVector <span class="title">newCapacity</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            sizes_and_strides_.sizes_begin(), sizes_and_strides_.sizes_end())</span></span>;</span><br><span class="line">        newCapacity[<span class="number">0</span>] = std::<span class="built_in">max</span>(</span><br><span class="line">            newDims[<span class="number">0</span>],</span><br><span class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(std::<span class="built_in">ceil</span>(</span><br><span class="line">                sizes_and_strides_.<span class="built_in">size_at_unchecked</span>(<span class="number">0</span>) * (<span class="number">1</span> + growthPct / <span class="number">100</span>))));</span><br><span class="line">        <span class="keyword">auto</span> oldData = std::<span class="built_in">move</span>(storage_.<span class="built_in">data_ptr</span>());</span><br><span class="line">        <span class="keyword">auto</span> oldSize = numel_;</span><br><span class="line">        <span class="built_in">Resize</span>(newCapacity);</span><br><span class="line">        <span class="keyword">auto</span>* newData = <span class="built_in">raw_mutable_data</span>(data_type_);</span><br><span class="line">        <span class="keyword">if</span> (data_type_.<span class="built_in">copy</span>()) &#123;</span><br><span class="line">            data_type_.<span class="built_in">copy</span>()(oldData.<span class="built_in">get</span>(), newData, oldSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">CopyBytes</span>(</span><br><span class="line">                oldSize * <span class="built_in">itemsize</span>(),</span><br><span class="line">                oldData.<span class="built_in">get</span>(),</span><br><span class="line">                <span class="built_in">device</span>(),</span><br><span class="line">                newData,</span><br><span class="line">                <span class="built_in">device</span>(),</span><br><span class="line">                <span class="literal">true</span>); <span class="comment">// non-blocking</span></span><br><span class="line">        &#125;</span><br><span class="line">        reserved_ = <span class="literal">true</span>;</span><br><span class="line">        sizes_and_strides_.<span class="built_in">set_sizes</span>(newDims);</span><br><span class="line">        numel_ = newNumel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief Reserve space for the underlying tensor.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * This must be called after Resize(), since we only specify the first</span></span><br><span class="line"><span class="comment">    * dimension This does not copy over the old data to the newly allocated space</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReserveSpace</span><span class="params">(<span class="keyword">const</span> T&amp; outer_dim)</span> </span>&#123;</span><br><span class="line">        <span class="function">SmallVector&lt;<span class="keyword">int64_t</span>, 5&gt; <span class="title">newCapacity</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            sizes_and_strides_.sizes_begin(), sizes_and_strides_.sizes_end())</span></span>;</span><br><span class="line">        newCapacity[<span class="number">0</span>] = outer_dim;</span><br><span class="line">        <span class="keyword">auto</span> newNumel = c10::<span class="built_in">multiply_integers</span>(newCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newNumel * data_type_.<span class="built_in">itemsize</span>() &lt;= storage_.<span class="built_in">nbytes</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        storage_.<span class="built_in">data_ptr</span>().<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">auto</span> oldSize = numel_;</span><br><span class="line">        <span class="function">SmallVector&lt;<span class="keyword">int64_t</span>, 5&gt; <span class="title">oldDims</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            sizes_and_strides_.sizes_begin(), sizes_and_strides_.sizes_end())</span></span>;</span><br><span class="line">        <span class="built_in">Resize</span>(newCapacity);</span><br><span class="line">        <span class="built_in">raw_mutable_data</span>(data_type_);</span><br><span class="line">        sizes_and_strides_.<span class="built_in">set_sizes</span>(oldDims);</span><br><span class="line">        numel_ = oldSize;</span><br><span class="line">        reserved_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief Resizes a tensor.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Resize takes in a vector of ints specifying the dimensions of the tensor.</span></span><br><span class="line"><span class="comment">    * You can pass in an empty vector to specify that it is a scalar (i.e.</span></span><br><span class="line"><span class="comment">    * containing one single item).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The underlying storage may be deleted after calling Resize: if the new</span></span><br><span class="line"><span class="comment">    * shape leads to a different number of items in the tensor, the old memory</span></span><br><span class="line"><span class="comment">    * is deleted and new memory will be allocated next time you call</span></span><br><span class="line"><span class="comment">    * mutable_data(). However, if the shape is different but the total number of</span></span><br><span class="line"><span class="comment">    * items is the same, the underlying storage is kept.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * This method respects caffe2_keep_on_shrink.  Consult the internal logic</span></span><br><span class="line"><span class="comment">    * of this method to see exactly under what circumstances this flag matters.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Resize</span><span class="params">(Ts... dim_source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> size_changed = <span class="built_in">SetDims</span>(dim_source...);</span><br><span class="line">        <span class="keyword">if</span> (size_changed) &#123;</span><br><span class="line">            <span class="built_in">HandleResize</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Resizes the tensor without touching underlying storage.</span></span><br><span class="line"><span class="comment">    * This requires the total size of the tensor to remains constant.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reshape</span><span class="params">(<span class="keyword">const</span> std::vector&lt;<span class="keyword">int64_t</span>&gt;&amp; dims)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int64_t</span> new_size = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> d : dims) &#123;</span><br><span class="line">            <span class="built_in">TORCH_CHECK</span>(d &gt;= <span class="number">0</span>);</span><br><span class="line">            new_size *= d;</span><br><span class="line">        &#125;</span><br><span class="line">        sizes_and_strides_.<span class="built_in">set_sizes</span>(dims);</span><br><span class="line">        <span class="built_in">empty_tensor_restride</span>(MemoryFormat::Contiguous);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Release whatever memory the tensor was holding but keep size and type</span></span><br><span class="line"><span class="comment">    * information. Subsequent call to mutable_data will trigger new memory</span></span><br><span class="line"><span class="comment">    * allocation.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FreeMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        storage_ = Storage::<span class="built_in">create_legacy</span>(storage_.<span class="built_in">device</span>());</span><br><span class="line">        storage_offset_ = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief Shares the data with another tensor.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * To share data between two tensors, the sizes of the two tensors must be</span></span><br><span class="line"><span class="comment">    * equal already. The reason we do not implicitly do a Resize to make the two</span></span><br><span class="line"><span class="comment">    * tensors have the same shape is that we want to allow tensors of different</span></span><br><span class="line"><span class="comment">    * shapes but the same number of items to still be able to share data. This</span></span><br><span class="line"><span class="comment">    * allows one to e.g. have a n-dimensional Tensor and a flattened version</span></span><br><span class="line"><span class="comment">    * sharing the same underlying storage.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * The source tensor should already have its data allocated.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// To be deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShareData</span><span class="params">(<span class="keyword">const</span> TensorImpl&amp; src)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// It is possible that the source tensor hasn&#x27;t called mutable_data() yet,</span></span><br><span class="line">        <span class="comment">// in which case ShareData() doesn&#x27;t make much sense since we don&#x27;t really</span></span><br><span class="line">        <span class="comment">// know what to share yet.</span></span><br><span class="line">        <span class="keyword">if</span> (!src.<span class="built_in">dtype_initialized</span>()) &#123;</span><br><span class="line">        <span class="built_in">C10_LOG_EVERY_MS</span>(WARNING, <span class="number">1000</span>)</span><br><span class="line">            &lt;&lt; <span class="string">&quot;Source tensor don&#x27;t have a data type (did you call mutable_data&lt;T&gt; on the tensor?)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Finally, do sharing.</span></span><br><span class="line">        <span class="comment">/* Since we create new Storage whenever we need to change data_type/nbytes</span></span><br><span class="line"><span class="comment">        * this still keeps the original semantics</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        storage_ = src.<span class="built_in">storage</span>();</span><br><span class="line">        data_type_ = src.<span class="built_in">dtype</span>();</span><br><span class="line">        device_opt_ = src.<span class="built_in">device_opt</span>();</span><br><span class="line">        storage_offset_ = src.<span class="built_in">storage_offset</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShareExternalPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        DataPtr&amp;&amp; data_ptr,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> caffe2::TypeMeta data_type,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">size_t</span> size_bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!size_bytes) &#123;</span><br><span class="line">            size_bytes = numel_ * data_type.<span class="built_in">itemsize</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (storage_.<span class="built_in">unique</span>()) &#123;</span><br><span class="line">            storage_.<span class="built_in">UniqueStorageShareExternalPointer</span>(</span><br><span class="line">                std::<span class="built_in">move</span>(data_ptr), size_bytes);</span><br><span class="line">            data_type_ = data_type;</span><br><span class="line">            device_opt_ = storage_.<span class="built_in">device</span>();</span><br><span class="line">            storage_offset_ = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Create a new Storage</span></span><br><span class="line">            storage_ = <span class="built_in">Storage</span>(</span><br><span class="line">                Storage::<span class="built_in">use_byte_size_t</span>(),</span><br><span class="line">                size_bytes,</span><br><span class="line">                std::<span class="built_in">move</span>(data_ptr),</span><br><span class="line">                <span class="comment">/*allocator=*/</span><span class="literal">nullptr</span>,</span><br><span class="line">                <span class="comment">/*resizable=*/</span><span class="literal">false</span>);</span><br><span class="line">            data_type_ = data_type;</span><br><span class="line">            device_opt_ = storage_.<span class="built_in">device</span>();</span><br><span class="line">            storage_offset_ = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns a mutable raw pointer of the underlying storage. Since we will need</span></span><br><span class="line"><span class="comment">    * to know the type of the data for allocation, a TypeMeta object is passed in</span></span><br><span class="line"><span class="comment">    * to specify the necessary information. This is conceptually equivalent of</span></span><br><span class="line"><span class="comment">    * calling mutable_data&lt;T&gt;() where the TypeMeta parameter meta is derived from</span></span><br><span class="line"><span class="comment">    * the type T. This function differs from mutable_data&lt;T&gt;() in the sense that</span></span><br><span class="line"><span class="comment">    * the type T can be specified during runtime via the TypeMeta object.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * If the existing data does not match the desired type, it will be deleted</span></span><br><span class="line"><span class="comment">    * and a new storage will be created.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span>* <span class="title">raw_mutable_data</span><span class="params">(<span class="keyword">const</span> caffe2::TypeMeta meta)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// For 0-size tensors it&#x27;s fine to return any pointer (including nullptr)</span></span><br><span class="line">        <span class="keyword">if</span> (data_type_ == meta &amp;&amp; <span class="built_in">storage_initialized</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(</span><br><span class="line">                <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(storage_.<span class="built_in">data</span>()) +</span><br><span class="line">                storage_offset_ * meta.<span class="built_in">itemsize</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">bool</span> had_special_dtor = data_type_.<span class="built_in">placementDelete</span>() != <span class="literal">nullptr</span>;</span><br><span class="line">            storage_offset_ = <span class="number">0</span>;</span><br><span class="line">            data_type_ = meta;</span><br><span class="line">            <span class="comment">// We can reuse the existing buffer if the current data does not have</span></span><br><span class="line">            <span class="comment">// a special destructor and the new data doesn&#x27;t have a special</span></span><br><span class="line">            <span class="comment">// constructor.</span></span><br><span class="line">            <span class="keyword">if</span> (numel_ == <span class="number">0</span> ||</span><br><span class="line">                (meta.<span class="built_in">placementNew</span>() == <span class="literal">nullptr</span> &amp;&amp; !had_special_dtor &amp;&amp;</span><br><span class="line">                (storage_.<span class="built_in">nbytes</span>() &gt;= (numel_ * data_type_.<span class="built_in">itemsize</span>())))) &#123;</span><br><span class="line">                <span class="built_in">TORCH_INTERNAL_ASSERT</span>(</span><br><span class="line">                    storage_offset_ == <span class="number">0</span>); <span class="comment">// because we just reallocated</span></span><br><span class="line">                <span class="keyword">return</span> storage_.<span class="built_in">data</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> Allocator* allocator = storage_.<span class="built_in">allocator</span>();</span><br><span class="line">            <span class="keyword">if</span> (allocator == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                allocator = <span class="built_in">GetAllocator</span>(storage_.<span class="built_in">device_type</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (meta.<span class="built_in">placementNew</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> size = numel_;</span><br><span class="line">                <span class="keyword">auto</span> dtor = data_type_.<span class="built_in">placementDelete</span>();</span><br><span class="line">                <span class="keyword">auto</span> data_ptr = allocator-&gt;<span class="built_in">allocate</span>(numel_ * data_type_.<span class="built_in">itemsize</span>());</span><br><span class="line">                storage_.<span class="built_in">set_data_ptr_noswap</span>(PlacementDeleteContext::<span class="built_in">makeDataPtr</span>(</span><br><span class="line">                    std::<span class="built_in">move</span>(data_ptr), dtor, size, storage_.<span class="built_in">device</span>()));</span><br><span class="line">                data_type_.<span class="built_in">placementNew</span>()(storage_.<span class="built_in">data</span>(), numel_);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                storage_.<span class="built_in">set_data_ptr_noswap</span>(</span><br><span class="line">                    allocator-&gt;<span class="built_in">allocate</span>(numel_ * data_type_.<span class="built_in">itemsize</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">            storage_.<span class="built_in">set_nbytes</span>(numel_ * data_type_.<span class="built_in">itemsize</span>());</span><br><span class="line">            <span class="built_in">TORCH_INTERNAL_ASSERT</span>(</span><br><span class="line">                storage_offset_ == <span class="number">0</span>); <span class="comment">// because we just reallocated</span></span><br><span class="line">            device_opt_ = storage_.<span class="built_in">device</span>();</span><br><span class="line">            <span class="keyword">return</span> storage_.<span class="built_in">data</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns a typed pointer of the underlying storage.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * For fundamental types, we reuse possible existing storage if there</span></span><br><span class="line"><span class="comment">    * is sufficient capacity.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T* <span class="title">mutable_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">storage_initialized</span>() &amp;&amp; data_type_.Match&lt;T&gt;()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T*&gt;(storage_.<span class="built_in">data</span>()) + storage_offset_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T*&gt;(<span class="built_in">raw_mutable_data</span>(caffe2::TypeMeta::Make&lt;T&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * True if a tensor is storage initialized.  A tensor may become</span></span><br><span class="line"><span class="comment">    * storage UNINITIALIZED after a Resize() or FreeMemory()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">storage_initialized</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage_.<span class="built_in">data</span>() || numel_ == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * True if a tensor is dtype initialized.  A tensor allocated with</span></span><br><span class="line"><span class="comment">    * Caffe2-style constructors is dtype uninitialized until the</span></span><br><span class="line"><span class="comment">    * first time mutable_data&lt;T&gt;() is called.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dtype_initialized</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data_type_ != caffe2::<span class="built_in">TypeMeta</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_storage_keep_dtype</span><span class="params">(at::Storage storage)</span> </span>&#123;</span><br><span class="line">        storage_ = std::<span class="built_in">move</span>(storage);</span><br><span class="line">        device_opt_ = storage_.<span class="built_in">device</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_storage_and_dtype</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        at::Storage storage,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> caffe2::TypeMeta data_type)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set_storage_keep_dtype</span>(storage);</span><br><span class="line">        data_type_ = data_type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HandleResize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Caffe2 Resize() method supports being called both as Resize(&#123;2,2&#125;) as</span></span><br><span class="line">    <span class="comment">// well as variadic with Resize(2, 2).  These overloads provide all of the</span></span><br><span class="line">    <span class="comment">// supported calling configurations, while being overloads (and not templates)</span></span><br><span class="line">    <span class="comment">// so that implicit conversions still work.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// SetDims on ArrayRef is internally implemented as a template, so we can</span></span><br><span class="line">    <span class="comment">// handle both ArrayRefs of different types (there are some uses of</span></span><br><span class="line">    <span class="comment">// Resize in Caffe2 which pass in int, not int64_t.)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;</span><br><span class="line">        <span class="keyword">typename</span> T,</span><br><span class="line">        <span class="keyword">typename</span> = <span class="keyword">typename</span> std::enable_if&lt;std::is_integral&lt;T&gt;::value&gt;::type&gt;</span><br><span class="line">    <span class="keyword">bool</span> <span class="built_in">SetDimsTemplate</span>(ArrayRef&lt;T&gt; src) &#123;</span><br><span class="line">        <span class="keyword">auto</span> old_numel = numel_;</span><br><span class="line">        sizes_and_strides_.<span class="built_in">resize</span>(src.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">int64_t</span> new_numel = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; src.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            new_numel *= src[i];</span><br><span class="line">            sizes_and_strides_.<span class="built_in">size_at_unchecked</span>(i) = src[i];</span><br><span class="line">        &#125;</span><br><span class="line">        numel_ = new_numel;</span><br><span class="line">        <span class="built_in">empty_tensor_restride</span>(MemoryFormat::Contiguous);</span><br><span class="line">        <span class="keyword">return</span> numel_ != old_numel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compute the number of elements based on the sizes of a tensor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int64_t</span> <span class="title">compute_numel</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int64_t</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> s : <span class="built_in">sizes</span>()) &#123;</span><br><span class="line">            n *= s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compute the number of elements based on the sizes of a</span></span><br><span class="line"><span class="comment">    * tensor. Catches integer overflow that may occur when a tensor</span></span><br><span class="line"><span class="comment">    * using a sparse layout has multiple dimensions with large sizes.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int64_t</span> <span class="title">safe_compute_numel</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int64_t</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> s : <span class="built_in">sizes</span>()) &#123;</span><br><span class="line">            n *= s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compute whether or not a tensor is contiguous based on the sizes and</span></span><br><span class="line"><span class="comment">    * strides of a tensor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compute_contiguous</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compute_channels_last_contiguous_2d</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compute_channels_last_contiguous_3d</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compute_strides_like_channels_last_2d</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compute_strides_like_channels_last_3d</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">compute_non_overlapping_and_dense</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_numel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        numel_ = <span class="built_in">compute_numel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">safe_refresh_numel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        numel_ = <span class="built_in">safe_compute_numel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Recompute the cached contiguity of a tensor.  Call this if you modify sizes</span></span><br><span class="line"><span class="comment">    * or strides.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_contiguous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        is_contiguous_ = <span class="built_in">compute_contiguous</span>();</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">dim</span>()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            is_channels_last_contiguous_ = <span class="built_in">compute_channels_last_contiguous_2d</span>();</span><br><span class="line">            is_channels_last_3d_contiguous_ = <span class="literal">false</span>;</span><br><span class="line">            is_channels_last_ = <span class="built_in">compute_strides_like_channels_last_2d</span>();</span><br><span class="line">            is_channels_last_3d_ = <span class="literal">false</span>;</span><br><span class="line">            is_non_overlapping_and_dense_ = is_contiguous_ ||</span><br><span class="line">                is_channels_last_contiguous_ || <span class="built_in">compute_non_overlapping_and_dense</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            is_channels_last_contiguous_ = <span class="built_in">compute_channels_last_contiguous_2d</span>();</span><br><span class="line">            is_channels_last_3d_contiguous_ = !is_channels_last_contiguous_ &amp;&amp;</span><br><span class="line">                <span class="built_in">compute_channels_last_contiguous_3d</span>();</span><br><span class="line">            is_channels_last_ = !is_channels_last_3d_contiguous_ &amp;&amp;</span><br><span class="line">                <span class="built_in">compute_strides_like_channels_last_2d</span>();</span><br><span class="line">            is_channels_last_3d_ =</span><br><span class="line">                !is_channels_last_ &amp;&amp; <span class="built_in">compute_strides_like_channels_last_3d</span>();</span><br><span class="line">            is_non_overlapping_and_dense_ = is_contiguous_ ||</span><br><span class="line">                is_channels_last_contiguous_ || is_channels_last_3d_contiguous_ ||</span><br><span class="line">                <span class="built_in">compute_non_overlapping_and_dense</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            is_channels_last_contiguous_ = <span class="literal">false</span>;</span><br><span class="line">            is_channels_last_3d_contiguous_ = <span class="literal">false</span>;</span><br><span class="line">            is_channels_last_ = <span class="literal">false</span>;</span><br><span class="line">            is_channels_last_3d_ = <span class="literal">false</span>;</span><br><span class="line">            is_non_overlapping_and_dense_ =</span><br><span class="line">                is_contiguous_ || <span class="built_in">compute_non_overlapping_and_dense</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Copy the tensor metadata fields (e.g. sizes / strides / storage pointer /</span></span><br><span class="line"><span class="comment">    * storage_offset) from one TensorImpl to another TensorImpl.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_tensor_metadata</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> TensorImpl* src_impl,</span></span></span><br><span class="line"><span class="params"><span class="function">        TensorImpl* dest_impl,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> c10::VariableVersion&amp; version_counter,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> allow_tensor_metadata_change)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Copy the tensor metadata fields (e.g. sizes / strides / storage pointer /</span></span><br><span class="line"><span class="comment">    * storage_offset) from one TensorImpl to another TensorImpl.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_tensor_metadata</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> TensorImpl* src_impl,</span></span></span><br><span class="line"><span class="params"><span class="function">        TensorImpl* dest_impl,</span></span></span><br><span class="line"><span class="params"><span class="function">        c10::VariableVersion&amp;&amp; version_counter,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> allow_tensor_metadata_change)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy_tensor_metadata_except_version_counter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> TensorImpl* src_impl,</span></span></span><br><span class="line"><span class="params"><span class="function">        TensorImpl* dest_impl,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> allow_tensor_metadata_change)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// Error message to show when the user tries to change tensor metadata on</span></span><br><span class="line">    <span class="comment">// Tensor created from .data or .detach().</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> err_msg_tensor_metadata_change_not_allowed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// Policy for adjusting the behavior of is_contiguous(). Allows</span></span><br><span class="line">    <span class="comment">// subclass customization while still being able to inline</span></span><br><span class="line">    <span class="comment">// is_contiguous() in the common case.</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">HasContiguityPolicy</span> :</span> <span class="keyword">uint8_t</span> &#123;</span><br><span class="line">        <span class="comment">// Default behavior: check is_contiguous_ and similar bitflags.</span></span><br><span class="line">        Default,</span><br><span class="line">        <span class="comment">// Throw a generic error message that this tensor type does not</span></span><br><span class="line">        <span class="comment">// support is_contiguous.</span></span><br><span class="line">        ContiguityNotSupported,</span><br><span class="line">        <span class="comment">// Call virtual is_contiguous_custom method to implement custom</span></span><br><span class="line">        <span class="comment">// is_contiguous behavior.</span></span><br><span class="line">        CustomBehavior,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_has_contiguity_policy</span><span class="params">(HasContiguityPolicy p)</span> </span>&#123;</span><br><span class="line">        has_contiguity_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint8_t</span>&gt;(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Storage storage_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unique_ptr&lt;c10::AutogradMetaInterface&gt; autograd_meta_ = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    std::unique_ptr&lt;c10::NamedTensorMetaInterface&gt; named_tensor_meta_ = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    c10::VariableVersion version_counter_;</span><br><span class="line"> </span><br><span class="line">    std::atomic&lt;impl::PyInterpreter*&gt; pyobj_interpreter_;</span><br><span class="line"></span><br><span class="line">    PyObject* pyobj_;</span><br><span class="line"></span><br><span class="line">    c10::impl::SizesAndStrides sizes_and_strides_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span> storage_offset_ = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int64_t</span> numel_ = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    caffe2::TypeMeta data_type_;</span><br><span class="line"></span><br><span class="line">    c10::optional&lt;c10::Device&gt; device_opt_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tensor is contiguous</span></span><br><span class="line">    <span class="keyword">bool</span> is_contiguous_ : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// gcc doesn&#x27;t like enum class bitfields; see</span></span><br><span class="line">    <span class="comment">// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61414</span></span><br><span class="line">    <span class="comment">/* HasContiguityPolicy */</span> <span class="keyword">uint8_t</span> has_contiguity_ : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tensor is a subclass that does not permit storage access.</span></span><br><span class="line">    <span class="keyword">bool</span> storage_access_should_throw_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// default member initializers for bit-fields only available with -std=c++2a</span></span><br><span class="line">    <span class="comment">// or -std=gnu++2a</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_bitfields</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        is_contiguous_ = <span class="literal">true</span>;</span><br><span class="line">        has_contiguity_ = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint8_t</span>&gt;(HasContiguityPolicy::Default);</span><br><span class="line">        is_channels_last_ = <span class="literal">false</span>;</span><br><span class="line">        is_channels_last_contiguous_ = <span class="literal">false</span>;</span><br><span class="line">        is_channels_last_3d_ = <span class="literal">false</span>;</span><br><span class="line">        is_channels_last_3d_contiguous_ = <span class="literal">false</span>;</span><br><span class="line">        is_non_overlapping_and_dense_ = <span class="literal">true</span>;</span><br><span class="line">        is_wrapped_number_ = <span class="literal">false</span>;</span><br><span class="line">        allow_tensor_metadata_change_ = <span class="literal">true</span>;</span><br><span class="line">        reserved_ = <span class="literal">false</span>;</span><br><span class="line">        owns_pyobj_ = <span class="literal">false</span>;</span><br><span class="line">        storage_access_should_throw_ = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_channels_last_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_channels_last_contiguous_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_channels_last_3d_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_channels_last_3d_contiguous_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_non_overlapping_and_dense_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_wrapped_number_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> allow_tensor_metadata_change_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> reserved_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> owns_pyobj_ : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    DispatchKeySet key_set_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;PyTorch 中的张量（Tensor）实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Deep Learning" scheme="https://aurumting.cn/categories/Deep-Learning/"/>
    
    
    <category term="PyTorch" scheme="https://aurumting.cn/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>自动微分</title>
    <link href="https://aurumting.cn/2021/11/28/automatic-differential/"/>
    <id>https://aurumting.cn/2021/11/28/automatic-differential/</id>
    <published>2021-11-28T11:38:58.002Z</published>
    <updated>2021-12-12T16:52:42.165Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="摘要"   >          <a href="#摘要" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h1>      <p>导数，主要以梯度和 Hessian 的形式存在，在机器学习中无处不在。自动微分（AD），也称为算法微分或简单的 “自动微分”，是一个类似于反向传播的技术系列，但比反向传播更普遍，用于有效和准确地评估以计算机程序表达的数字函数的导数。</p><span id="more"></span>        <h1 id="介绍"   >          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h1>      <p>在计算机程序中计算导数的方法可分为四类：</p><ol><li>手工计算导数并进行编码</li><li>使用有限差分近似法进行数值微分</li><li>使用计算机代数系统（如 Mathematica、Maxima 和 Maple）中的表达式操作进行符号微分</li><li>自动微分，也称为算法微分</li></ol><p>传统上，机器学习中的许多方法都需要计算导数，大多数传统的学习算法都依赖于目标函数梯度和 Hessian 的计算。当引入新的模型时，机器学习研究人员花费了大量精力手工推导分析导数，然后将其插入标准优化程序，如 L-BFGS 或随机梯度下降。人工微分很耗时，而且容易出错。在其他替代方法中，数值微分的实现很简单，但由于舍入和截断误差，可能非常不准确；更重要的是，它对梯度的扩展性很差，使得它不适合机器学习，因为机器学习通常需要与数百万参数有关的梯度。符号微分法解决了手工和数值方法的弱点，但往往会产生复杂而隐秘的表达式，受到 “表达式膨胀” 问题的困扰。此外，手工和符号方法要求模型被定义为闭合形式的表达式，排除或严重限制了算法的控制流和表现力。</p><p>我们关注的是强大的第四种技术，自动微分（AD）。AD 对一个给定的计算机程序进行非标准的解释，通过替换变量的域来纳入导数值，并重新定义运算符的语义，根据微积分的链式规则传播导数。</p><p>AD 中的 “自动” 一词可能会引起混淆，导致机器学习从业者给任何不涉及人工微分的方法或工具贴上 “自动微分” 的标签，而不对其基本机制给予应有的关注。我们想强调的是，AD 作为一个技术术语指的是一个特定的技术系列，它通过在代码执行过程中的数值积累来计算导数，从而产生数值导数求值，而不是导数表达式。这允许在机器精度下准确地求值导数，只需很小的恒定系数的开销和理想的渐进效率。与在符号微分的语法和语义约束下将代码安排为闭合形式表达式所涉及的努力相比，AD 可以用最小的变化应用于常规代码，允许分支、循环和递归。</p><p>在机器学习中，AD 的一个专门对应算法被称为反向传播算法，一直是训练神经网络的主流，它有着被独立研究者在不同时期重新发明的多彩历史。最简单地说，反向传播的学习模式是在神经网络权重空间中的梯度下降，寻找一个目标函数的最小值。所需的梯度是通过对输出端目标值的敏感性进行反向传播而获得的（图 1），利用链式规则来计算目标相对于每个权重的偏导数。由此产生的算法基本上等同于将网络评价函数与反向模式 AD 下的目标函数进行转换，正如我们将看到的，这实际上是对反向传播思想的泛化。因此，对反向传播的基础数学有一定的了解，就能为掌握 AD 技术提供足够的背景。</p><p><img src="/images/automatic-differential/Figure_1.png" alt="Figure 1" /></p>        <h1 id="ad-及其主要模式"   >          <a href="#ad-及其主要模式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ad-及其主要模式"></a> AD 及其主要模式</h1>      <p>AD 可以被认为是对一个计算机程序的非标准解释，这种解释涉及到用各种导数的计算来增加标准计算的内容。所有的数值计算最终都是由一组有限的基本运算组成的，这些运算的导数是已知的，通过链式规则将组成运算的导数组合起来，就可以得到整个组合的导数。通常这些基本运算包括二元算术运算、一元符号转换和超越式函数，如指数、对数和三角函数。</p><p><img src="/images/automatic-differential/Table_2.png" alt="Table 2" /></p><p>在表 2 的左边，我们看到计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = f (x_1 , x_2 ) = \ln(x_1) + x_1 x_2 - \sin(x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 作为基本运算的求值轨迹的表示，也称为 Wengert 列表。我们采用 Griewank 和 Walther 使用的三部分符号，其中一个函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> 是用中间变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 构建的，因此：</p><ul><li>变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mrow><mi>i</mi><mo>−</mo><mi>n</mi></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_{i-n} = x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i=1, \dots, n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span> 是输入变量</li><li>变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">v_i i = 1, \dots, l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 是工作（中间）变量</li><li>变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mrow><mi>m</mi><mo>−</mo><mi>i</mi></mrow></msub><mo>=</mo><msub><mi>v</mi><mrow><mi>l</mi><mo>−</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">y_{m-i} = v_{l-i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">i = m-1, \dots, 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span></span></span></span> 是输出变量</li></ul><p>图 4 显示了以计算图表示的基本操作的给定轨迹，对于可视化中间变量之间的依赖关系很有用。</p><p><img src="/images/automatic-differential/Figure_4.png" alt="Figure 4" /></p><p>求值轨迹构成了 AD 技术的基础。这里需要注意的一点是，AD 不仅可以微分经典意义上的封闭式表达式，还可以微分使用控制流的算法，如分支、循环、递归和过程调用，这使得它比符号微分具有重要的优势，因为符号微分严重限制了这种表达能力。这要归功于这样一个事实，即任何数值代码最终都会产生一个带有输入、中间和输出变量的特定值的数值求值轨迹，这是使用链式规则组合计算导数时唯一需要知道的东西，而不管执行过程中采取的具体控制流路径。另一种表达方式是，AD 对任何操作都是盲目的，包括控制流语句，它不直接改变数值。</p>        <h2 id="前向模式"   >          <a href="#前向模式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#前向模式"></a> 前向模式</h2>      <p>前向积累模式的 AD 是概念上最简单的类型。考虑函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_1, x_2) = \ln(x_1) + x_1 x_2 - \sin(x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的求值轨迹，表 2 的左侧给出了该函数的求值轨迹，图 4 则是该函数的图形形式。为了计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的导数，我们首先将每个中间变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与一个导数联系起来，</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>v</mi><mi>i</mi></msub><mo>˙</mo></mover><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mi>i</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\dot{v_i} = \dfrac{\partial v_i}{\partial x_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8178599999999999em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.13889em;">˙</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>对前向原始轨迹中的每个基本操作应用链式规则，我们产生相应的切线（导数）轨迹，在表 2 中的右侧给出。将原点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与相应的切线 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>v</mi><mi>i</mi></msub><mo>˙</mo></mover></mrow><annotation encoding="application/x-tex">\dot{v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8178599999999999em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.13889em;">˙</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 同步求值，就可以得到最终变量中所需要的导数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>v</mi><mn>5</mn></msub><mo>˙</mo></mover><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\dot{v_5} = \frac{\partial y}{\partial x_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8178599999999999em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.13889em;">˙</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.377316em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。</p><p>这可以自然而然地推广到计算一个有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个独立（输入）变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个从属（输出）变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">y_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> 的 Jacobian 。在这种情况下，AD 的每个前向传播的初始化是只设置其中一个变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>x</mi><mi>i</mi></msub><mo>˙</mo></mover><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\dot{x_i}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8178599999999999em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.13889em;">˙</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，其余的设置为零（换句话说，设置 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi mathvariant="bold">x</mi><mo>˙</mo></mover><mo>=</mo><msub><mi mathvariant="bold">e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\dot{\mathbf{x}} = \mathbf{e}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6813em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6813em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">x</span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">e</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="bold">e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathbf{e}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">e</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个单位向量）。在特定的输入值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi><mo>=</mo><mi mathvariant="bold">a</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}= \mathbf{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">a</span></span></span></span></span> 的情况下，代码的运行会计算：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>y</mi><mi>j</mi></msub><mo>˙</mo></mover><mo>=</mo><msub><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>j</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>i</mi></msub></mrow></mfrac><mo fence="true">∣</mo></mrow><mrow><mi mathvariant="bold">x</mi><mo>=</mo><mi mathvariant="bold">a</mi></mrow></msub><mo separator="true">,</mo><mtext> </mtext><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\dot{y_j} = \left. \dfrac{\partial y_j}{\partial x_i} \right|_{\mathbf{x} = \mathbf{a}} , \  j = 1, \dots, m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9539679999999999em;vertical-align:-0.286108em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.13889em;">˙</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4737em;vertical-align:-0.9997199999999998em;"></span><span class="minner"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.6886119999999998em;"><span style="top:-1.7002800000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">x</span></span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathbf mtight">a</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9997199999999998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span></span></span></span></p><p>得出 Jacobian 矩阵的一列：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="bold">J</mi><mi>f</mi></msub><mo>=</mo><msub><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋱</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo fence="true">∣</mo></mrow><mrow><mi mathvariant="bold">x</mi><mo>=</mo><mi mathvariant="bold">a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathbf{J}_f = \left. \begin{bmatrix}\frac{\partial y_1}{\partial x_1} \ &amp;\cdots \ &amp;\frac{\partial y_1}{\partial x_n} \\\vdots \ &amp;\ddots \ &amp;\vdots \\\frac{\partial y_m}{\partial x_1} \ &amp;\cdots \ &amp;\frac{\partial y_m}{\partial x_n}\end{bmatrix}\right|_{\mathbf{x} = \mathbf{a}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.972218em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">J</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.664332em;vertical-align:-2.1070159999999993em;"></span><span class="minner"><span class="minner"><span class="mopen nulldelimiter"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.3126em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span><span class="mspace"> </span></span></span><span style="top:-2.075284000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.1251em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span><span class="mspace"> </span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span><span class="mspace"> </span></span></span><span style="top:-1.8877840000000008em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.3126em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.075284000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3919649999999995em;"><span style="top:-0.7559649999999998em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.3619649999999996em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.9679649999999995em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.5739649999999994em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.1799649999999997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.7859649999999996em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.391964999999999em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850035em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-1.7959079999999994em;"><span style="top:-0.5929840000000008em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbf mtight">x</span></span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathbf mtight">a</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1070159999999993em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>在点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">a</mi></mrow><annotation encoding="application/x-tex">\mathbf{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">a</span></span></span></span></span> 求值。因此，在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 次计算中可以计算出完整的 Jacobian 矩阵。</p><p>此外，前向模式 AD 提供了一种非常有效的、无矩阵的计算 Jacobian 向量乘积的方法，</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><msub><mi mathvariant="bold">J</mi><mi>f</mi></msub><mi mathvariant="bold">r</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋱</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\mathbf{J}_f \mathbf{r} = \begin{bmatrix}\frac{\partial y_1}{\partial x_1} \ &amp;\cdots \ &amp;\frac{\partial y_1}{\partial x_n} \\\vdots \ &amp;\ddots \ &amp;\vdots \\\frac{\partial y_m}{\partial x_1} \ &amp;\cdots \ &amp;\frac{\partial y_m}{\partial x_n}\end{bmatrix} \ \begin{bmatrix}    r_1 \\ \vdots \\ r_n\end{bmatrix} \tag{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.972218em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">J</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">r</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.614631999999999em;vertical-align:-2.0573159999999993em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.3126em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span><span class="mspace"> </span></span></span><span style="top:-2.075284000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.1251em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span><span class="mspace"> </span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span><span class="mspace"> </span></span></span><span style="top:-1.8877840000000008em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.3126em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.075284000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3800000000000003em;"><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3674999999999997em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.1674999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8800000000000006em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:4.614631999999999em;vertical-align:-2.0573159999999993em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p><p>只需用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi mathvariant="bold">x</mi><mo>˙</mo></mover><mo>=</mo><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\dot{\mathbf{x}} = \mathbf{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6813em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6813em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">x</span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">r</span></span></span></span></span> 进行初始化。因此，我们可以在一次前向过程中计算 Jacobian 向量乘积。作为一种特殊情况，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> 时，我们可以通过从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi mathvariant="bold">x</mi><mo>˙</mo></mover><mo>=</mo><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\dot{\mathbf{x}} = \mathbf{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6813em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6813em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">x</span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">r</span></span></span></span></span> 开始的 AD 计算，得到沿给定向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\mathbf{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">r</span></span></span></span></span> 的方向导数，作为偏导的线性组合：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∇</mi><mi>f</mi><mo>⋅</mo><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\nabla f \cdot \mathbf{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∇</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">r</span></span></span></span></span></span></p><p>前向模式 AD 对于函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant="double-struck">R</mi><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">f : \mathbb{R} \to \mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> 是高效和直接的，因为所有导数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>i</mi></msub></mrow><mi>x</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial y_i}{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 都可以通过一次正向传播计算得到。反之，在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> 的另一个极端，前向模式 AD 需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 次求值来计算梯度：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∇</mi><mi>f</mi><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\nabla f = \left(\dfrac{\partial y}{\partial x_1} , \cdots, \dfrac{\partial y}{\partial x_n} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∇</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>这也对应于一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的 Jacobian 矩阵，用正向模式在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 次求值中逐列建立。</p><p>一般来说，对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≫</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n \gg m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≫</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> ，通常会选择不同的技术。</p>        <h3 id="对偶数"   >          <a href="#对偶数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对偶数"></a> 对偶数</h3>      <p>在数学上，正向模式 AD（由表 2 中的左边和右边表示）可以被看作是用对偶数来求值一个函数，它可以被定义为截断的泰勒级数，其形式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>+</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">v + \dot{v} \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo separator="true">,</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mo>∈</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">v, \dot{v} \in \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8623000000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> 并且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> 是一个幂零数，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ϵ</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\epsilon^2 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">ϵ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 并且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">\epsilon \ne 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。例如，请注意：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>v</mi><mo>+</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mover accent="true"><mi>u</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>v</mi><mo>+</mo><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mo>+</mo><mover accent="true"><mi>u</mi><mo>˙</mo></mover><mo stretchy="false">)</mo><mi>ϵ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><mi>v</mi><mo>+</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mover accent="true"><mi>u</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>v</mi><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>v</mi><mover accent="true"><mi>u</mi><mo>˙</mo></mover><mo>+</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>u</mi><mo stretchy="false">)</mo><mi>ϵ</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}(v + \dot{v} \epsilon) + (u + \dot{u} \epsilon) &amp;= (v + u) + (\dot{v} + \dot{u}) \epsilon \\(v + \dot{v} \epsilon) (u + \dot{u} \epsilon) &amp;= (vu) + (v \dot{u} + \dot{v}u) \epsilon\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">ϵ</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mord mathdefault">ϵ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> 的系数方便地反映符号微分规则。我们可以通过建立一个函数来利用这一点：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo>+</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">f(v + \dot{v} \epsilon) = f(v) + f&#x27;(v) \dot{v} \epsilon \tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span></span><span class="tag"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p>并使用对偶数作为数据结构，将切线值与原始值一起携带。链式规则在这种表示法上如预期的那样工作：对公式 (2) 的两次应用得到：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>v</mi><mo>+</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>g</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><msup><mi>g</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mover accent="true"><mi>v</mi><mo>˙</mo></mover><mi>ϵ</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f(g(v + \dot{v} \epsilon)) &amp;= f(g(v) + g&#x27;(v) \dot{v} \epsilon) \\&amp;= f(g(v)) + f&#x27;(g(v))g&#x27;(v) \dot{v} \epsilon\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.11111000000000001em;">˙</span></span></span></span></span></span><span class="mord mathdefault">ϵ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>右边的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> 系数正是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> 的组合的导数。这意味着，既然我们实现了基本操作以遵守不变量公式 (2)，那么它们的所有组合也会这样做。这又意味着，我们可以通过将任何非对偶数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 解释为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>+</mo><mn>0</mn><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">v + 0 \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathdefault">ϵ</span></span></span></span> ，并对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> 在系数为 1 的初始输入上以这种非标准的方式求值函数，从而提取函数的导数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mfrac><mrow><mi mathvariant="sans-serif">d</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="sans-serif">d</mi><mi>x</mi></mrow></mfrac><mo fence="true">∣</mo></mrow><mrow><mi>x</mi><mo>=</mo><mi>v</mi></mrow></msub><mo>=</mo><mi>ϵ</mi><mtext> 的系数</mtext><mo stretchy="false">(</mo><mtext>对偶版本</mtext><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>v</mi><mo>+</mo><mn>1</mn><mi>ϵ</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\left. \dfrac{\mathsf{d} f(x)}{\mathsf{d} x} \right|_{x = v} = \epsilon \ \text{的系数}(\text{对偶版本}(f)(v + 1 \epsilon))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4737em;vertical-align:-0.9997199999999998em;"></span><span class="minner"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathsf">d</span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathsf">d</span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.6983279999999998em;"><span style="top:-1.7002800000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9997199999999998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϵ</span><span class="mspace"> </span><span class="mord text"><span class="mord cjk_fallback">的系数</span></span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">对偶版本</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathdefault">ϵ</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>这也延伸到了任意的程序结构，因为对偶数作为数据类型，可以包含在任何数据结构中。只要一个对偶数保持在数据结构中，没有对它进行算术运算，它就只是一个对偶数；如果把它从数据结构中取出来，再进行运算，那么微分就会继续进行。</p><p>在实践中，一个用所选择的编程语言编码的函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 将被送入 AD 工具，然后该工具将用相应的额外代码来处理对偶运算，以便函数和它的导数同时被计算。这可以通过调用特定的库来实现，以源代码转换的形式，给定的源代码将被自动修改，或者通过运算符重载，使这个过程对用户透明。</p>        <h4 id="ceres-实现"   >          <a href="#ceres-实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ceres-实现"></a> Ceres 实现</h4>      <p>模板类 <code>Jet</code> （为便于理解，略去了部分语法细节）：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Jet</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> DIMENSION = N &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> T Scalar;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Jet</span>() : <span class="built_in">a</span>() &#123; v.<span class="built_in">setConstant</span>(<span class="built_in">Scalar</span>()); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor from scalar: a + 0.</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Jet</span><span class="params">(<span class="keyword">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">        a = value;</span><br><span class="line">        v.<span class="built_in">setConstant</span>(<span class="built_in">Scalar</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor from scalar plus variable: a + t_i.</span></span><br><span class="line">    <span class="built_in">Jet</span>(<span class="keyword">const</span> T&amp; value, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        a = value;</span><br><span class="line">        v.<span class="built_in">setConstant</span>(<span class="built_in">Scalar</span>());</span><br><span class="line">        v[k] = <span class="built_in">T</span>(<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor from scalar and vector part</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line">    <span class="function">EIGEN_STRONG_INLINE <span class="title">Jet</span><span class="params">(<span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> Eigen::DenseBase&lt;Derived&gt;&amp; v)</span></span></span><br><span class="line"><span class="function">        : a(a), v(v) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compound operators</span></span><br><span class="line">    Jet&lt;T, N&gt;&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; y) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Jet&lt;T, N&gt;&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; y) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compound with scalar operators.</span></span><br><span class="line">    Jet&lt;T, N&gt;&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> T&amp; s) &#123; </span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + s; </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Jet&lt;T, N&gt;&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> T&amp; s) &#123; </span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - s; </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// The scalar part.</span></span><br><span class="line">    T a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The infinitesimal part.</span></span><br><span class="line">    Eigen::Matrix&lt;T, N, <span class="number">1</span>&gt; v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>模板类 <code>Jet</code> 中有两个成员变量：T 类型的 “标量” a 和 T 类型的列向量 v ，即长度为 N 的一阶摄动向量：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>+</mo><munder><mo>∑</mo><mi>i</mi></munder><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x = a + \sum_i v[i] t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>一种简单的写法是将元素写成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>u</mi></mrow><annotation encoding="application/x-tex">x = a + u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> 为摄动。</p><p>下面是一些基本运算符的实现：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Binary +</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="keyword">operator</span>+(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f, <span class="keyword">const</span> Jet&lt;T, N&gt;&amp; g) &#123;</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(f.a + g.a, f.v + g.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Binary *</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="keyword">operator</span>*(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f, <span class="keyword">const</span> Jet&lt;T, N&gt;&amp; g) &#123;</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(f.a * g.a, f.a * g.v + f.v * g.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Binary /</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="keyword">operator</span>/(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f, <span class="keyword">const</span> Jet&lt;T, N&gt;&amp; g) &#123;</span><br><span class="line">    <span class="comment">// This uses:</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   a + u   (a + u)(b - v)   (a + u)(b - v)</span></span><br><span class="line">    <span class="comment">//   ----- = -------------- = --------------</span></span><br><span class="line">    <span class="comment">//   b + v   (b + v)(b - v)        b^2</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// which holds because v*v = 0.</span></span><br><span class="line">    <span class="keyword">const</span> T g_a_inverse = <span class="built_in">T</span>(<span class="number">1.0</span>) / g.a;</span><br><span class="line">    <span class="keyword">const</span> T f_a_by_g_a = f.a * g_a_inverse;</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(f_a_by_g_a, (f.v - f_a_by_g_a * g.v) * g_a_inverse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>可以看到，好的代码是自文档化的。</p><p>最后是一些基本函数的实现：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log(a + h) ~= log(a) + h / a</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="title">log</span><span class="params">(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> T a_inverse = <span class="built_in">T</span>(<span class="number">1.0</span>) / f.a;</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(<span class="built_in">log</span>(f.a), f.v * a_inverse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exp(a + h) ~= exp(a) + exp(a) h</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="title">exp</span><span class="params">(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> T tmp = <span class="built_in">exp</span>(f.a);</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(tmp, tmp * f.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cos(a + h) ~= cos(a) - sin(a) h</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="title">cos</span><span class="params">(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(<span class="built_in">cos</span>(f.a), -<span class="built_in">sin</span>(f.a) * f.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sin(a + h) ~= sin(a) + cos(a) h</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Jet&lt;T, N&gt; <span class="title">sin</span><span class="params">(<span class="keyword">const</span> Jet&lt;T, N&gt;&amp; f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Jet&lt;T, N&gt;(<span class="built_in">sin</span>(f.a), <span class="built_in">cos</span>(f.a) * f.v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>很明显，以上就是将公式 (2) 具体化为各个基本函数。</p><p>下面考虑 <code>Jet</code> 是怎么用来计算 Jacobian 的：</p><p>考虑向量值函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> ，接受 4 维向量值参数，返回一个 3 维向量：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     y            x</span></span><br><span class="line"><span class="comment">//   [ * ]    F   [ * ]</span></span><br><span class="line"><span class="comment">//   [ * ]  &lt;---  [ * ]</span></span><br><span class="line"><span class="comment">//   [ * ]        [ * ]</span></span><br><span class="line"><span class="comment">//                [ * ]</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></div></figure><p>计算 Jacobian <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi mathvariant="sans-serif">d</mi><mi>y</mi></mrow><mrow><mi mathvariant="sans-serif">d</mi><mi>x</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{\mathsf{d}y}{\mathsf{d}x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathsf">d</span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathsf">d</span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 是通过为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> 的计算的所有中间步骤替换一个合适的 <code>Jet</code> 对象完成的。因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span></span></span></span> 有 4 维，使用：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jet&lt;<span class="keyword">double</span>, <span class="number">4</span>&gt;</span><br></pre></td></tr></table></div></figure><p>在用 <code>Jet</code> 物体代替 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span></span></span></span> 之前，要对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span></span></span></span> 的每个维度进行适当的对偶成分设置：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//          y                       x</span></span><br><span class="line"><span class="comment">//   [ * | * * * * ]    f   [ * | 1 0 0 0 ]   x0</span></span><br><span class="line"><span class="comment">//   [ * | * * * * ]  &lt;---  [ * | 0 1 0 0 ]   x1</span></span><br><span class="line"><span class="comment">//   [ * | * * * * ]        [ * | 0 0 1 0 ]   x2</span></span><br><span class="line"><span class="comment">//         ---+---          [ * | 0 0 0 1 ]   x3</span></span><br><span class="line"><span class="comment">//            |                   ^ ^ ^ ^</span></span><br><span class="line"><span class="comment">//          dy/dx                 | | | +----- infinitesimal for x3</span></span><br><span class="line"><span class="comment">//                                | | +------- infinitesimal for x2</span></span><br><span class="line"><span class="comment">//                                | +--------- infinitesimal for x1</span></span><br><span class="line"><span class="comment">//                                +----------- infinitesimal for x0</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></div></figure><p>将内部 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4 \times 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 子矩阵设置为恒等矩阵的原因是，我们希望对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span></span></span></span> 的每个维度分别求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">y</mi></mrow><annotation encoding="application/x-tex">\mathbf{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span></span></span> 的导数。因此， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4 \times 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 恒等矩阵的每一列都是针对自变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">x</span></span></span></span></span> 的一个分量。</p><p>然后，映射的 Jacobian， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi mathvariant="sans-serif">d</mi><mi>y</mi></mrow><mrow><mi mathvariant="sans-serif">d</mi><mi>x</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{\mathsf{d}y}{\mathsf{d}x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathsf">d</span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathsf">d</span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，是延伸 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">y</mi></mrow><annotation encoding="application/x-tex">\mathbf{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span></span></span> 向量的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">3 \times 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 的子矩阵。如上图所示。</p><p>在实践中，使用一个由两个或更多的向量值参数组成的函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> ，往往是很方便的。例如， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x[3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">z[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span> 。不幸的是，<code>Jet</code> 框架是为单参数向量值输入而设计的。下面的封装器解决了这个问题，增加了对具有一个或多个参数向量的函数的支持。</p><p>为了支持多参数，所有的参数向量都被串联成一个，并被视为一个参数向量，只是由于仿函数期望不同的输入，我们需要把 <code>Jet</code> 当作单个参数向量的一部分来构造。扩展的 <code>Jet</code> 是为每个参数单独传递的。</p><p>作为例子，考虑一个仿函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> ，接受两个向量参数： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span></span></span></span> ，并产生输出： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">y[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span> 。在这种情况下，必要的 <code>Jet</code> 类型是：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jet&lt;<span class="keyword">double</span>, <span class="number">5</span>&gt;</span><br></pre></td></tr></table></div></figure><p>下面是这种情况下 <code>Jet</code> 对象的可视化：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//          Dual components for p ----+</span></span><br><span class="line"><span class="comment">//                                    |</span></span><br><span class="line"><span class="comment">//                                   -+-</span></span><br><span class="line"><span class="comment">//           y                 [ * | 1 0 | 0 0 0 ]    --- p[0]</span></span><br><span class="line"><span class="comment">//                             [ * | 0 1 | 0 0 0 ]    --- p[1]</span></span><br><span class="line"><span class="comment">//   [ * | . . | + + + ]         |</span></span><br><span class="line"><span class="comment">//   [ * | . . | + + + ]         v</span></span><br><span class="line"><span class="comment">//   [ * | . . | + + + ]  &lt;--- F(p, q)</span></span><br><span class="line"><span class="comment">//   [ * | . . | + + + ]            ^</span></span><br><span class="line"><span class="comment">//         ^^^   ^^^^^              |</span></span><br><span class="line"><span class="comment">//        dy/dp  dy/dq            [ * | 0 0 | 1 0 0 ] --- q[0]</span></span><br><span class="line"><span class="comment">//                                [ * | 0 0 | 0 1 0 ] --- q[1]</span></span><br><span class="line"><span class="comment">//                                [ * | 0 0 | 0 0 1 ] --- q[2]</span></span><br><span class="line"><span class="comment">//                                            --+--</span></span><br><span class="line"><span class="comment">//                                              |</span></span><br><span class="line"><span class="comment">//          Dual components for q --------------+</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></div></figure><p>其中，上图中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">y</mi></mrow><annotation encoding="application/x-tex">\mathbf{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">4 \times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 子矩阵（标有 “.”）和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">4 \times 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 子矩阵（标有 “+”）分别是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">y</mi></mrow><annotation encoding="application/x-tex">\mathbf{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span></span></span> 相对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf">p</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">q</mi></mrow><annotation encoding="application/x-tex">\mathbf{q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf">q</span></span></span></span></span> 的导数。这就是我们的自动微分对于接受多个向量值参数（最多 6 个）的仿函数的工作方式。</p><p>首先是构造一阶摄动：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> j, <span class="keyword">int</span> N, <span class="keyword">int</span> Offset, <span class="keyword">typename</span> T, <span class="keyword">typename</span> JetT&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Make1stOrderPerturbation</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Apply</span><span class="params">(<span class="keyword">const</span> T* src, JetT* dst)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">DCHECK</span>(src);</span><br><span class="line">            <span class="built_in">DCHECK</span>(dst);</span><br><span class="line">        &#125;</span><br><span class="line">        dst[j] = <span class="built_in">JetT</span>(src[j], j + Offset);</span><br><span class="line">        Make1stOrderPerturbation&lt;j + <span class="number">1</span>, N, Offset, T, JetT&gt;::<span class="built_in">Apply</span>(src, dst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N, <span class="keyword">int</span> Offset, <span class="keyword">typename</span> T, <span class="keyword">typename</span> JetT&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Make1stOrderPerturbation</span>&lt;</span>N, N, Offset, T, JetT&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Apply</span><span class="params">(<span class="keyword">const</span> T* src, JetT* dst)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><p>这里使用了 C++ 模板元编程的递归风格，其中第二个函数对应着递归的终止情况：当第一个模板参数 j 等于 N 时不作为。</p><p>回忆一下 <code>Jet</code> 模板类的构造函数可知，针对数值数组 src，<code>Make1stOrderPerturbation</code> 将其每个元素替换为相应的 <code>Jet</code> 类并放入 <code>Jet</code> 数组 dst 中。<br />例如，如果 N=3，offset=3 并且 <code>JetT</code> 有 8 个维度：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//             0   1 2   3 4 5   6 7 8</span></span><br><span class="line"><span class="comment">//   dst[0]  [ * | . . | 1 0 0 | . . . ]</span></span><br><span class="line"><span class="comment">//   dst[1]  [ * | . . | 0 1 0 | . . . ]</span></span><br><span class="line"><span class="comment">//   dst[2]  [ * | . . | 0 0 1 | . . . ]</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></div></figure><p>接着，提取延伸部分：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Takes the 0th order part of src, assumed to be a Jet type, and puts it in</span></span><br><span class="line"><span class="comment">// dst. This is used to pick out the &quot;vector&quot; part of the extended y.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> JetT, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Take0thOrderPart</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">const</span> JetT* src, T dst)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">DCHECK</span>(src);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        dst[i] = src[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Takes N 1st order parts, starting at index N0, and puts them in the M x N</span></span><br><span class="line"><span class="comment">// matrix &#x27;dst&#x27;. This is used to pick out the &quot;matrix&quot; parts of the extended y.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N0, <span class="keyword">int</span> N, <span class="keyword">typename</span> JetT, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Take1stOrderPart</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> M, <span class="keyword">const</span> JetT* src, T* dst)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">DCHECK</span>(src);</span><br><span class="line">    <span class="built_in">DCHECK</span>(dst);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        Eigen::Map&lt;Eigen::Matrix&lt;T, N, <span class="number">1</span>&gt;&gt;(dst + N * i, N) =</span><br><span class="line">            src[i].v.<span class="keyword">template</span> segment&lt;N&gt;(N0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>vector.segment&lt;n&gt;(i)</code> 是 <span class="exturl"><a class="exturl__link"   href="https://eigen.tuxfamily.org" >Eigen</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 构建固定大小的 <code>block</code> 表达的版本，表示一个包含着从位置 i 开始，共 n 个元素的 <code>block</code>，而 <code>Eigen::Map</code> 可以映射现有数据数组的矩阵或向量表达式</p><p>因此函数的结果是将 src 中 M 个元素的摄动向量，从 N0 开始共 N 个分量分别提取到 dst 中，最后形成 M <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> N 的矩阵。</p><p>最后是包装器 <code>AutoDifferentiate</code> 函数：</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> kNumResiduals,</span><br><span class="line">          <span class="keyword">typename</span> ParameterDims,</span><br><span class="line">          <span class="keyword">typename</span> Functor,</span><br><span class="line">          <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">AutoDifferentiate</span><span class="params">(<span class="keyword">const</span> Functor&amp; functor,</span></span></span><br><span class="line"><span class="params"><span class="function">                              T <span class="keyword">const</span>* <span class="keyword">const</span>* parameters,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> dynamic_num_outputs,</span></span></span><br><span class="line"><span class="params"><span class="function">                              T* function_value,</span></span></span><br><span class="line"><span class="params"><span class="function">                              T** jacobians)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> Jet&lt;T, ParameterDims::kNumParameters&gt; JetT;</span><br><span class="line">    <span class="keyword">using</span> Parameters = <span class="keyword">typename</span> ParameterDims::Parameters;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kNumResiduals != DYNAMIC) &#123;</span><br><span class="line">        <span class="built_in">DCHECK_EQ</span>(kNumResiduals, dynamic_num_outputs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ArraySelector&lt;JetT,</span></span><br><span class="line"><span class="function">                    ParameterDims::kNumParameters,</span></span><br><span class="line"><span class="function">                    CERES_AUTODIFF_MAX_PARAMETERS_ON_STACK&gt;</span></span><br><span class="line"><span class="function">        <span class="title">parameters_as_jets</span><span class="params">(ParameterDims::kNumParameters)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pointers to the beginning of each parameter block</span></span><br><span class="line">    std::array&lt;JetT*, ParameterDims::kNumParameterBlocks&gt; unpacked_parameters =</span><br><span class="line">        ParameterDims::<span class="built_in">GetUnpackedParameters</span>(parameters_as_jets.<span class="built_in">data</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the number of residuals is fixed, we use the template argument as the</span></span><br><span class="line">    <span class="comment">// number of outputs. Otherwise we use the num_outputs parameter. Note: The</span></span><br><span class="line">    <span class="comment">// ?-operator here is compile-time evaluated, therefore num_outputs is also</span></span><br><span class="line">    <span class="comment">// a compile-time constant for functors with fixed residuals.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> num_outputs =</span><br><span class="line">        kNumResiduals == DYNAMIC ? dynamic_num_outputs : kNumResiduals;</span><br><span class="line">    <span class="built_in">DCHECK_GT</span>(num_outputs, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">ArraySelector&lt;JetT, kNumResiduals, CERES_AUTODIFF_MAX_RESIDUALS_ON_STACK&gt;</span></span><br><span class="line"><span class="function">        <span class="title">residuals_as_jets</span><span class="params">(num_outputs)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invalidate the output Jets, so that we can detect if the user</span></span><br><span class="line">    <span class="comment">// did not assign values to all of them.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_outputs; ++i) &#123;</span><br><span class="line">        residuals_as_jets[i].a = kImpossibleValue;</span><br><span class="line">        residuals_as_jets[i].v.<span class="built_in">setConstant</span>(kImpossibleValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Make1stOrderPerturbations&lt;Parameters&gt;::<span class="built_in">Apply</span>(parameters,</span><br><span class="line">                                                parameters_as_jets.<span class="built_in">data</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!VariadicEvaluate&lt;ParameterDims&gt;(</span><br><span class="line">            functor, unpacked_parameters.<span class="built_in">data</span>(), residuals_as_jets.<span class="built_in">data</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Take0thOrderPart</span>(num_outputs, residuals_as_jets.<span class="built_in">data</span>(), function_value);</span><br><span class="line">    Take1stOrderParts&lt;Parameters&gt;::<span class="built_in">Apply</span>(</span><br><span class="line">        num_outputs, residuals_as_jets.<span class="built_in">data</span>(), jacobians);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>重点是上面介绍的四个函数的应用，在一些检查之后，分别构建了对应于输入参数维度、输出维度的 <code>Jet</code> 类版本：<code>parameters_as_jets</code>、<code>residuals_as_jets</code>，接着利用输入参数 <code>parameters</code> 完成 <code>parameters_as_jets</code> 一阶摄动的构建，然后提取输出 <code>residuals_as_jets</code> 的零阶部分到 <code>function_value</code> 向量；提取 <code>residuals_as_jets</code> 的一阶部分到 <code>jacobian</code> 矩阵中。</p>        <h2 id="反向模式"   >          <a href="#反向模式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反向模式"></a> 反向模式</h2>      <p>反向积累模式下的 AD 相当于一个广义的反向传播算法，因为它从一个给定的输出向后传播导数。这是通过给每个中间变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 补充一个邻接来实现的：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>j</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mi>i</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\bar{v}_i = \dfrac{\partial y_j}{\partial v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这个邻接代表了所考虑的输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">y_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的变化的敏感性。在反向传播的情况下， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 是一个对应于误差 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span> 的标量（图 1）。</p><p>在反向模式 AD 中，导数是在一个两阶段过程的第二阶段计算的。在第一阶段，原始函数代码被向前运行，填充中间变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，并通过簿记程序记录计算图中的依赖关系。在第二阶段，通过反向传播相邻的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bar{v}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 来计算导数，从输出到输入。</p><p>回到例子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = f(x_1, x_2) = \ln(x_1) + x_1 x_2 - \sin(x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，在表 3 中我们看到右侧的邻接语句，对应于左侧的每个原始基本运算。简单地说，我们感兴趣的是计算每个变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的变化对输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 变化的贡献 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mi>i</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\bar{v}_i = \frac{\partial y}{\partial v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.377316em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。以变量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为例，我们在图 4 中看到，它影响 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的唯一途径是通过影响 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">v_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">v_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，所以它对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 变化的贡献由以下公式给出：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>2</mn></msub></mrow></mfrac><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>2</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>3</mn></msub></mrow></mfrac><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>3</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\dfrac{\partial y}{\partial v_0} = \dfrac{\partial y}{\partial v_2} \dfrac{\partial v_2}{\partial v_0} + \dfrac{\partial y}{\partial v_3} \dfrac{\partial v_3}{\partial v_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>或者：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>0</mn></msub><mo>=</mo><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>2</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>2</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac><mo>+</mo><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>3</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>3</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\bar{v}_0 = \bar{v}_2 \dfrac{\partial v_2}{\partial v_0} + \bar{v}_3 \dfrac{\partial v_3}{\partial v_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src="/images/automatic-differential/Table_3.png" alt="Table" /></p><p>在表 3 中，这一贡献是通过两个递增步骤计算的：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>0</mn></msub><mo>=</mo><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>3</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>3</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\bar{v}_0 = \bar{v}_3 \dfrac{\partial v_3}{\partial v_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>和：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>0</mn></msub><mo>=</mo><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>0</mn></msub><mo>+</mo><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>2</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>2</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>v</mi><mn>0</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\bar{v}_0 = \bar{v}_0 + \bar{v}_2 \dfrac{\partial v_2}{\partial v_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>与这些表达式所来自的正向轨迹中的线条排成一列。</p><p>在左手边的正向传播之后，我们在右手边运行邻接的反向传播，从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mn>5</mn></msub><mo>=</mo><mover accent="true"><mi>y</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\bar{v}_5 = \bar{y} = \frac{\partial y}{\partial y} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7622199999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4133239999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开始。最后，我们只需一次反向传播就能得到导数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mo>=</mo><msub><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\frac{\partial y}{\partial x_1} = \bar{x}_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.377316em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>2</mn></msub></mrow></mfrac><mo>=</mo><msub><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\frac{\partial y}{\partial x_2} = \bar{x}_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.377316em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.71778em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>与正向积累模式的直截了当相比，反向模式的 AD 起初可能显得有些 “神秘”。这部分是由于人们普遍认识到链式规则是一个向前传播导数的机械程序。</p><p>反向模式的一个重要优势是，对于有大量输入的函数，它的求值成本（就操作数而言）明显低于正向模式。在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> 的极端情况下，只需应用一次反向模式就能计算出全部梯度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∇</mi><mi>f</mi><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\nabla f = \left( \frac{\partial y}{\partial x_1} , \dots, \frac{\partial y}{\partial x_n} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∇</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span> ，而正向模式则需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 次操作来填充相同的梯度。由于机器学习实践主要涉及标量值目标相对于大量参数的梯度，这就确立了反向模式，而不是正向模式，作为反向传播算法的主流技术。</p><p>一般来说，对于一个函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">f : \mathbb{R}^n \to \mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> ，如果我们用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>ops</mtext><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{ops}(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">ops</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span> 表示评估原始函数的操作数，那么用正向模式计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> Jacobian 的时间是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mtext> </mtext><mi>c</mi><mtext> ops</mtext><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \ c \ \text{ops}(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mspace"> </span><span class="mord text"><span class="mord">ops</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span> ，而通过反向模式计算同样的计算可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mtext> </mtext><mi>c</mi><mtext> ops</mtext><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m \ c \ \text{ops}(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mspace"> </span><span class="mord text"><span class="mord">ops</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span> 中完成，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 是一个常数，保证 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>&lt;</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">c&lt;6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> ，通常 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>∼</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">c \sim [2, 3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span> 。也就是说，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≪</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \ll n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≪</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 时，反向模式 AD 表现更好。</p><p>与正向模式的无矩阵计算 Jacobian 向量积类似（公式 1），反向模式可用于计算转置的 Jacobian 向量积：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi mathvariant="bold">J</mi><mi>f</mi><mi mathvariant="sans-serif">T</mi></msubsup><mi mathvariant="bold">r</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋱</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>y</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>m</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{J}^\mathsf{T}_f \mathbf{r} = \begin{bmatrix}\frac{\partial y_1}{\partial x_1} \ &amp;\cdots \ &amp;\frac{\partial y_m}{\partial x_1} \\\vdots \ &amp;\ddots \ &amp;\vdots \\\frac{\partial y_1}{\partial x_n} \ &amp;\cdots \ &amp;\frac{\partial y_m}{\partial x_n}\end{bmatrix} \ \begin{bmatrix}    r_1 \\ \vdots \\ r_m\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.282216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">J</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathsf mtight">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">r</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.614631999999999em;vertical-align:-2.0573159999999993em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.3126em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span><span class="mspace"> </span></span></span><span style="top:-2.075284000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.1251em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span><span class="mspace"> </span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span><span class="mspace"> </span></span></span><span style="top:-1.8877840000000008em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.557316em;"><span style="top:-5.3126em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.075284000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0573159999999993em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3800000000000003em;"><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3674999999999997em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.1674999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8800000000000006em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.351015em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.104995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.351015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过将反向阶段初始化为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi mathvariant="bold">y</mi><mo>ˉ</mo></mover><mo>=</mo><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\bar{\mathbf{y}}=\mathbf{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77566em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.58122em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">ˉ</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">r</span></span></span></span></span> 。</p><p>然而，反向模式 AD 的优势是以增加存储需求为代价的，（在最坏情况下）与被求值函数的操作数量成正比。这是一个活跃的研究领域，通过使用先进的方法，如检查点策略和数据流分析，来改善实现中的存储需求。</p>        <h3 id="pytorch-实现"   >          <a href="#pytorch-实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pytorch-实现"></a> PyTorch 实现</h3>      <p>请参考 <a href="https://aurumting.cn/2021/12/05/PyTorch_autograd/">PyTorch 源码阅读：autograd</a> 。</p>        <h1 id="参考"   >          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>      <ul><li><span class="exturl"><a class="exturl__link"   href="http://arxiv.org/abs/1502.05767v4" >Automatic Differentiation in Machine Learning: a Survey</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="http://ceres-solver.org/" >Ceres</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://eigen.tuxfamily.org" >Eigen</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://pytorch.org/" >PyTorch</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;摘要&quot;   &gt;
          &lt;a href=&quot;#摘要&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#摘要&quot;&gt;&lt;/a&gt; 摘要&lt;/h1&gt;
      
&lt;p&gt;导数，主要以梯度和 Hessian 的形式存在，在机器学习中无处不在。自动微分（AD），也称为算法微分或简单的 “自动微分”，是一个类似于反向传播的技术系列，但比反向传播更普遍，用于有效和准确地评估以计算机程序表达的数字函数的导数。&lt;/p&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="https://aurumting.cn/categories/Machine-Learning/"/>
    
    
    <category term="cpp" scheme="https://aurumting.cn/tags/cpp/"/>
    
    <category term="calculus" scheme="https://aurumting.cn/tags/calculus/"/>
    
  </entry>
  
</feed>
